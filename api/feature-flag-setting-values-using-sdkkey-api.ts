/* tslint:disable */
/* eslint-disable */
/**
 * ConfigCat Public Management API
 * The purpose of this API is to access the ConfigCat platform programmatically. You can **Create**, **Read**, **Update** and **Delete** any entities like **Feature Flags, Configs, Environments** or **Products** within ConfigCat.  **Base API URL**: https://test-api.configcat.com  If you prefer the swagger documentation, you can find it here: [Swagger UI](https://test-api.configcat.com/swagger).  The API is based on HTTP REST, uses resource-oriented URLs, status codes and supports JSON  format. Do not use this API for accessing and evaluating feature flag values. Use the [SDKs instead](https://configcat.com/docs/sdk-reference/overview).   # OpenAPI Specification  The complete specification is publicly available in the following formats:  - [OpenAPI v3](https://test-api.configcat.com/docs/v1/swagger.json) - [Swagger v2](https://test-api.configcat.com/docs/v1/swagger.v2.json)  You can use it to generate client libraries in various languages with [OpenAPI Generator](https://github.com/OpenAPITools/openapi-generator) or [Swagger Codegen](https://swagger.io/tools/swagger-codegen/) to interact with this API.  # Authentication This API uses the [Basic HTTP Authentication Scheme](https://en.wikipedia.org/wiki/Basic_access_authentication).   <!-- ReDoc-Inject: <security-definitions> -->  # Throttling and rate limits All the rate limited API calls are returning information about the current rate limit period in the following HTTP headers:  | Header | Description | | :- | :- | | X-Rate-Limit-Remaining | The maximum number of requests remaining in the current rate limit period. | | X-Rate-Limit-Reset     | The time when the current rate limit period resets.        |  When the rate limit is exceeded by a request, the API returns with a `HTTP 429 - Too many requests` status along with a `Retry-After` HTTP header. 
 *
 * The version of the OpenAPI document: v1
 * Contact: support@configcat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { JsonPatchOperation } from '../model';
// @ts-ignore
import { SettingValueModel } from '../model';
// @ts-ignore
import { UpdateSettingValueModel } from '../model';
/**
 * FeatureFlagSettingValuesUsingSDKKeyApi - axios parameter creator
 * @export
 */
export const FeatureFlagSettingValuesUsingSDKKeyApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint returns the value of a Feature Flag or Setting  in a specified Environment identified by the <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://app.configcat.com/sdkkey\">SDK key</a> passed in the `X-CONFIGCAT-SDKKEY` header.  The most important attributes in the response are the `value`, `rolloutRules` and `percentageRules`. The `value` represents what the clients will get when the evaluation requests of our SDKs  are not matching to any of the defined Targeting or Percentage Rules, or when there are no additional rules to evaluate.  The `rolloutRules` and `percentageRules` attributes are representing the current  Targeting and Percentage Rules configuration of the actual Feature Flag or Setting  in an **ordered** collection, which means the order of the returned rules is matching to the evaluation order. You can read more about these rules [here](https://configcat.com/docs/advanced/targeting/).
         * @summary Get value
         * @param {string} settingKeyOrId The key or id of the Setting.
         * @param {string} [xCONFIGCATSDKKEY] The ConfigCat SDK Key. (https://app.configcat.com/sdkkey)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSettingValueBySdkkey: async (settingKeyOrId: string, xCONFIGCATSDKKEY?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'settingKeyOrId' is not null or undefined
            assertParamExists('getSettingValueBySdkkey', 'settingKeyOrId', settingKeyOrId)
            const localVarPath = `/v1/settings/{settingKeyOrId}/value`
                .replace(`{${"settingKeyOrId"}}`, encodeURIComponent(String(settingKeyOrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (xCONFIGCATSDKKEY != null) {
                localVarHeaderParameter['X-CONFIGCAT-SDKKEY'] = String(xCONFIGCATSDKKEY);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint replaces the value of a Feature Flag or Setting  in a specified Environment identified by the <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://app.configcat.com/sdkkey\">SDK key</a> passed in the `X-CONFIGCAT-SDKKEY` header.  Only the `value`, `rolloutRules` and `percentageRules` attributes are modifiable by this endpoint.  **Important:** As this endpoint is doing a complete replace, it\'s important to set every other attribute that you don\'t  want to change to its original state. Not listing one means that it will reset.  For example: We have the following resource. ```json {   \"rolloutPercentageItems\": [     {       \"percentage\": 30,       \"value\": true     },     {       \"percentage\": 70,       \"value\": false     }   ],   \"rolloutRules\": [],   \"value\": false } ``` If we send a replace request body as below: ```json {   \"value\": true } ``` Then besides that the default served value is set to `true`, all the Percentage Rules are deleted.  So we get a response like this: ```json {   \"rolloutPercentageItems\": [],   \"rolloutRules\": [],   \"value\": true } ```
         * @summary Replace value
         * @param {string} settingKeyOrId The key or id of the Setting.
         * @param {UpdateSettingValueModel} updateSettingValueModel 
         * @param {string} [reason] The reason note for the Audit Log if the Product\&#39;s \&quot;Config changes require a reason\&quot; preference is turned on.
         * @param {string} [xCONFIGCATSDKKEY] The ConfigCat SDK Key. (https://app.configcat.com/sdkkey)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceSettingValueBySdkkey: async (settingKeyOrId: string, updateSettingValueModel: UpdateSettingValueModel, reason?: string, xCONFIGCATSDKKEY?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'settingKeyOrId' is not null or undefined
            assertParamExists('replaceSettingValueBySdkkey', 'settingKeyOrId', settingKeyOrId)
            // verify required parameter 'updateSettingValueModel' is not null or undefined
            assertParamExists('replaceSettingValueBySdkkey', 'updateSettingValueModel', updateSettingValueModel)
            const localVarPath = `/v1/settings/{settingKeyOrId}/value`
                .replace(`{${"settingKeyOrId"}}`, encodeURIComponent(String(settingKeyOrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (reason !== undefined) {
                localVarQueryParameter['reason'] = reason;
            }

            if (xCONFIGCATSDKKEY != null) {
                localVarHeaderParameter['X-CONFIGCAT-SDKKEY'] = String(xCONFIGCATSDKKEY);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateSettingValueModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint updates the value of a Feature Flag or Setting  with a collection of [JSON Patch](https://jsonpatch.com) operations in a specified Environment identified by the <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://app.configcat.com/sdkkey\">SDK key</a> passed in the `X-CONFIGCAT-SDKKEY` header.  Only the `value`, `rolloutRules` and `percentageRules` attributes are modifiable by this endpoint.  The advantage of using JSON Patch is that you can describe individual update operations on a resource without touching attributes that you don\'t want to change. It supports collection reordering, so it also  can be used for reordering the targeting rules of a Feature Flag or Setting.  For example: We have the following resource. ```json {   \"rolloutPercentageItems\": [     {       \"percentage\": 30,       \"value\": true     },     {       \"percentage\": 70,       \"value\": false     }   ],   \"rolloutRules\": [],   \"value\": false } ``` If we send an update request body as below: ```json [   {     \"op\": \"replace\",     \"path\": \"/value\",     \"value\": true   } ] ``` Only the default served value is going to be set to `true` and all the Percentage Rules are remaining unchanged. So we get a response like this: ```json {   \"rolloutPercentageItems\": [     {       \"percentage\": 30,       \"value\": true     },     {       \"percentage\": 70,       \"value\": false     }   ],   \"rolloutRules\": [],   \"value\": true } ```
         * @summary Update value
         * @param {string} settingKeyOrId The key or id of the Setting.
         * @param {Array<JsonPatchOperation>} jsonPatchOperation 
         * @param {string} [reason] The reason note for the Audit Log if the Product\&#39;s \&quot;Config changes require a reason\&quot; preference is turned on.
         * @param {string} [xCONFIGCATSDKKEY] The ConfigCat SDK Key. (https://app.configcat.com/sdkkey)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSettingValueBySdkkey: async (settingKeyOrId: string, jsonPatchOperation: Array<JsonPatchOperation>, reason?: string, xCONFIGCATSDKKEY?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'settingKeyOrId' is not null or undefined
            assertParamExists('updateSettingValueBySdkkey', 'settingKeyOrId', settingKeyOrId)
            // verify required parameter 'jsonPatchOperation' is not null or undefined
            assertParamExists('updateSettingValueBySdkkey', 'jsonPatchOperation', jsonPatchOperation)
            const localVarPath = `/v1/settings/{settingKeyOrId}/value`
                .replace(`{${"settingKeyOrId"}}`, encodeURIComponent(String(settingKeyOrId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (reason !== undefined) {
                localVarQueryParameter['reason'] = reason;
            }

            if (xCONFIGCATSDKKEY != null) {
                localVarHeaderParameter['X-CONFIGCAT-SDKKEY'] = String(xCONFIGCATSDKKEY);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(jsonPatchOperation, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FeatureFlagSettingValuesUsingSDKKeyApi - functional programming interface
 * @export
 */
export const FeatureFlagSettingValuesUsingSDKKeyApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FeatureFlagSettingValuesUsingSDKKeyApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint returns the value of a Feature Flag or Setting  in a specified Environment identified by the <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://app.configcat.com/sdkkey\">SDK key</a> passed in the `X-CONFIGCAT-SDKKEY` header.  The most important attributes in the response are the `value`, `rolloutRules` and `percentageRules`. The `value` represents what the clients will get when the evaluation requests of our SDKs  are not matching to any of the defined Targeting or Percentage Rules, or when there are no additional rules to evaluate.  The `rolloutRules` and `percentageRules` attributes are representing the current  Targeting and Percentage Rules configuration of the actual Feature Flag or Setting  in an **ordered** collection, which means the order of the returned rules is matching to the evaluation order. You can read more about these rules [here](https://configcat.com/docs/advanced/targeting/).
         * @summary Get value
         * @param {string} settingKeyOrId The key or id of the Setting.
         * @param {string} [xCONFIGCATSDKKEY] The ConfigCat SDK Key. (https://app.configcat.com/sdkkey)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSettingValueBySdkkey(settingKeyOrId: string, xCONFIGCATSDKKEY?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SettingValueModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSettingValueBySdkkey(settingKeyOrId, xCONFIGCATSDKKEY, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FeatureFlagSettingValuesUsingSDKKeyApi.getSettingValueBySdkkey']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This endpoint replaces the value of a Feature Flag or Setting  in a specified Environment identified by the <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://app.configcat.com/sdkkey\">SDK key</a> passed in the `X-CONFIGCAT-SDKKEY` header.  Only the `value`, `rolloutRules` and `percentageRules` attributes are modifiable by this endpoint.  **Important:** As this endpoint is doing a complete replace, it\'s important to set every other attribute that you don\'t  want to change to its original state. Not listing one means that it will reset.  For example: We have the following resource. ```json {   \"rolloutPercentageItems\": [     {       \"percentage\": 30,       \"value\": true     },     {       \"percentage\": 70,       \"value\": false     }   ],   \"rolloutRules\": [],   \"value\": false } ``` If we send a replace request body as below: ```json {   \"value\": true } ``` Then besides that the default served value is set to `true`, all the Percentage Rules are deleted.  So we get a response like this: ```json {   \"rolloutPercentageItems\": [],   \"rolloutRules\": [],   \"value\": true } ```
         * @summary Replace value
         * @param {string} settingKeyOrId The key or id of the Setting.
         * @param {UpdateSettingValueModel} updateSettingValueModel 
         * @param {string} [reason] The reason note for the Audit Log if the Product\&#39;s \&quot;Config changes require a reason\&quot; preference is turned on.
         * @param {string} [xCONFIGCATSDKKEY] The ConfigCat SDK Key. (https://app.configcat.com/sdkkey)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async replaceSettingValueBySdkkey(settingKeyOrId: string, updateSettingValueModel: UpdateSettingValueModel, reason?: string, xCONFIGCATSDKKEY?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SettingValueModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.replaceSettingValueBySdkkey(settingKeyOrId, updateSettingValueModel, reason, xCONFIGCATSDKKEY, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FeatureFlagSettingValuesUsingSDKKeyApi.replaceSettingValueBySdkkey']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This endpoint updates the value of a Feature Flag or Setting  with a collection of [JSON Patch](https://jsonpatch.com) operations in a specified Environment identified by the <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://app.configcat.com/sdkkey\">SDK key</a> passed in the `X-CONFIGCAT-SDKKEY` header.  Only the `value`, `rolloutRules` and `percentageRules` attributes are modifiable by this endpoint.  The advantage of using JSON Patch is that you can describe individual update operations on a resource without touching attributes that you don\'t want to change. It supports collection reordering, so it also  can be used for reordering the targeting rules of a Feature Flag or Setting.  For example: We have the following resource. ```json {   \"rolloutPercentageItems\": [     {       \"percentage\": 30,       \"value\": true     },     {       \"percentage\": 70,       \"value\": false     }   ],   \"rolloutRules\": [],   \"value\": false } ``` If we send an update request body as below: ```json [   {     \"op\": \"replace\",     \"path\": \"/value\",     \"value\": true   } ] ``` Only the default served value is going to be set to `true` and all the Percentage Rules are remaining unchanged. So we get a response like this: ```json {   \"rolloutPercentageItems\": [     {       \"percentage\": 30,       \"value\": true     },     {       \"percentage\": 70,       \"value\": false     }   ],   \"rolloutRules\": [],   \"value\": true } ```
         * @summary Update value
         * @param {string} settingKeyOrId The key or id of the Setting.
         * @param {Array<JsonPatchOperation>} jsonPatchOperation 
         * @param {string} [reason] The reason note for the Audit Log if the Product\&#39;s \&quot;Config changes require a reason\&quot; preference is turned on.
         * @param {string} [xCONFIGCATSDKKEY] The ConfigCat SDK Key. (https://app.configcat.com/sdkkey)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSettingValueBySdkkey(settingKeyOrId: string, jsonPatchOperation: Array<JsonPatchOperation>, reason?: string, xCONFIGCATSDKKEY?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SettingValueModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSettingValueBySdkkey(settingKeyOrId, jsonPatchOperation, reason, xCONFIGCATSDKKEY, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FeatureFlagSettingValuesUsingSDKKeyApi.updateSettingValueBySdkkey']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * FeatureFlagSettingValuesUsingSDKKeyApi - factory interface
 * @export
 */
export const FeatureFlagSettingValuesUsingSDKKeyApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FeatureFlagSettingValuesUsingSDKKeyApiFp(configuration)
    return {
        /**
         * This endpoint returns the value of a Feature Flag or Setting  in a specified Environment identified by the <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://app.configcat.com/sdkkey\">SDK key</a> passed in the `X-CONFIGCAT-SDKKEY` header.  The most important attributes in the response are the `value`, `rolloutRules` and `percentageRules`. The `value` represents what the clients will get when the evaluation requests of our SDKs  are not matching to any of the defined Targeting or Percentage Rules, or when there are no additional rules to evaluate.  The `rolloutRules` and `percentageRules` attributes are representing the current  Targeting and Percentage Rules configuration of the actual Feature Flag or Setting  in an **ordered** collection, which means the order of the returned rules is matching to the evaluation order. You can read more about these rules [here](https://configcat.com/docs/advanced/targeting/).
         * @summary Get value
         * @param {string} settingKeyOrId The key or id of the Setting.
         * @param {string} [xCONFIGCATSDKKEY] The ConfigCat SDK Key. (https://app.configcat.com/sdkkey)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSettingValueBySdkkey(settingKeyOrId: string, xCONFIGCATSDKKEY?: string, options?: any): AxiosPromise<SettingValueModel> {
            return localVarFp.getSettingValueBySdkkey(settingKeyOrId, xCONFIGCATSDKKEY, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint replaces the value of a Feature Flag or Setting  in a specified Environment identified by the <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://app.configcat.com/sdkkey\">SDK key</a> passed in the `X-CONFIGCAT-SDKKEY` header.  Only the `value`, `rolloutRules` and `percentageRules` attributes are modifiable by this endpoint.  **Important:** As this endpoint is doing a complete replace, it\'s important to set every other attribute that you don\'t  want to change to its original state. Not listing one means that it will reset.  For example: We have the following resource. ```json {   \"rolloutPercentageItems\": [     {       \"percentage\": 30,       \"value\": true     },     {       \"percentage\": 70,       \"value\": false     }   ],   \"rolloutRules\": [],   \"value\": false } ``` If we send a replace request body as below: ```json {   \"value\": true } ``` Then besides that the default served value is set to `true`, all the Percentage Rules are deleted.  So we get a response like this: ```json {   \"rolloutPercentageItems\": [],   \"rolloutRules\": [],   \"value\": true } ```
         * @summary Replace value
         * @param {string} settingKeyOrId The key or id of the Setting.
         * @param {UpdateSettingValueModel} updateSettingValueModel 
         * @param {string} [reason] The reason note for the Audit Log if the Product\&#39;s \&quot;Config changes require a reason\&quot; preference is turned on.
         * @param {string} [xCONFIGCATSDKKEY] The ConfigCat SDK Key. (https://app.configcat.com/sdkkey)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceSettingValueBySdkkey(settingKeyOrId: string, updateSettingValueModel: UpdateSettingValueModel, reason?: string, xCONFIGCATSDKKEY?: string, options?: any): AxiosPromise<SettingValueModel> {
            return localVarFp.replaceSettingValueBySdkkey(settingKeyOrId, updateSettingValueModel, reason, xCONFIGCATSDKKEY, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint updates the value of a Feature Flag or Setting  with a collection of [JSON Patch](https://jsonpatch.com) operations in a specified Environment identified by the <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://app.configcat.com/sdkkey\">SDK key</a> passed in the `X-CONFIGCAT-SDKKEY` header.  Only the `value`, `rolloutRules` and `percentageRules` attributes are modifiable by this endpoint.  The advantage of using JSON Patch is that you can describe individual update operations on a resource without touching attributes that you don\'t want to change. It supports collection reordering, so it also  can be used for reordering the targeting rules of a Feature Flag or Setting.  For example: We have the following resource. ```json {   \"rolloutPercentageItems\": [     {       \"percentage\": 30,       \"value\": true     },     {       \"percentage\": 70,       \"value\": false     }   ],   \"rolloutRules\": [],   \"value\": false } ``` If we send an update request body as below: ```json [   {     \"op\": \"replace\",     \"path\": \"/value\",     \"value\": true   } ] ``` Only the default served value is going to be set to `true` and all the Percentage Rules are remaining unchanged. So we get a response like this: ```json {   \"rolloutPercentageItems\": [     {       \"percentage\": 30,       \"value\": true     },     {       \"percentage\": 70,       \"value\": false     }   ],   \"rolloutRules\": [],   \"value\": true } ```
         * @summary Update value
         * @param {string} settingKeyOrId The key or id of the Setting.
         * @param {Array<JsonPatchOperation>} jsonPatchOperation 
         * @param {string} [reason] The reason note for the Audit Log if the Product\&#39;s \&quot;Config changes require a reason\&quot; preference is turned on.
         * @param {string} [xCONFIGCATSDKKEY] The ConfigCat SDK Key. (https://app.configcat.com/sdkkey)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSettingValueBySdkkey(settingKeyOrId: string, jsonPatchOperation: Array<JsonPatchOperation>, reason?: string, xCONFIGCATSDKKEY?: string, options?: any): AxiosPromise<SettingValueModel> {
            return localVarFp.updateSettingValueBySdkkey(settingKeyOrId, jsonPatchOperation, reason, xCONFIGCATSDKKEY, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FeatureFlagSettingValuesUsingSDKKeyApi - object-oriented interface
 * @export
 * @class FeatureFlagSettingValuesUsingSDKKeyApi
 * @extends {BaseAPI}
 */
export class FeatureFlagSettingValuesUsingSDKKeyApi extends BaseAPI {
    /**
     * This endpoint returns the value of a Feature Flag or Setting  in a specified Environment identified by the <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://app.configcat.com/sdkkey\">SDK key</a> passed in the `X-CONFIGCAT-SDKKEY` header.  The most important attributes in the response are the `value`, `rolloutRules` and `percentageRules`. The `value` represents what the clients will get when the evaluation requests of our SDKs  are not matching to any of the defined Targeting or Percentage Rules, or when there are no additional rules to evaluate.  The `rolloutRules` and `percentageRules` attributes are representing the current  Targeting and Percentage Rules configuration of the actual Feature Flag or Setting  in an **ordered** collection, which means the order of the returned rules is matching to the evaluation order. You can read more about these rules [here](https://configcat.com/docs/advanced/targeting/).
     * @summary Get value
     * @param {string} settingKeyOrId The key or id of the Setting.
     * @param {string} [xCONFIGCATSDKKEY] The ConfigCat SDK Key. (https://app.configcat.com/sdkkey)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeatureFlagSettingValuesUsingSDKKeyApi
     */
    public getSettingValueBySdkkey(settingKeyOrId: string, xCONFIGCATSDKKEY?: string, options?: RawAxiosRequestConfig) {
        return FeatureFlagSettingValuesUsingSDKKeyApiFp(this.configuration).getSettingValueBySdkkey(settingKeyOrId, xCONFIGCATSDKKEY, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint replaces the value of a Feature Flag or Setting  in a specified Environment identified by the <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://app.configcat.com/sdkkey\">SDK key</a> passed in the `X-CONFIGCAT-SDKKEY` header.  Only the `value`, `rolloutRules` and `percentageRules` attributes are modifiable by this endpoint.  **Important:** As this endpoint is doing a complete replace, it\'s important to set every other attribute that you don\'t  want to change to its original state. Not listing one means that it will reset.  For example: We have the following resource. ```json {   \"rolloutPercentageItems\": [     {       \"percentage\": 30,       \"value\": true     },     {       \"percentage\": 70,       \"value\": false     }   ],   \"rolloutRules\": [],   \"value\": false } ``` If we send a replace request body as below: ```json {   \"value\": true } ``` Then besides that the default served value is set to `true`, all the Percentage Rules are deleted.  So we get a response like this: ```json {   \"rolloutPercentageItems\": [],   \"rolloutRules\": [],   \"value\": true } ```
     * @summary Replace value
     * @param {string} settingKeyOrId The key or id of the Setting.
     * @param {UpdateSettingValueModel} updateSettingValueModel 
     * @param {string} [reason] The reason note for the Audit Log if the Product\&#39;s \&quot;Config changes require a reason\&quot; preference is turned on.
     * @param {string} [xCONFIGCATSDKKEY] The ConfigCat SDK Key. (https://app.configcat.com/sdkkey)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeatureFlagSettingValuesUsingSDKKeyApi
     */
    public replaceSettingValueBySdkkey(settingKeyOrId: string, updateSettingValueModel: UpdateSettingValueModel, reason?: string, xCONFIGCATSDKKEY?: string, options?: RawAxiosRequestConfig) {
        return FeatureFlagSettingValuesUsingSDKKeyApiFp(this.configuration).replaceSettingValueBySdkkey(settingKeyOrId, updateSettingValueModel, reason, xCONFIGCATSDKKEY, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint updates the value of a Feature Flag or Setting  with a collection of [JSON Patch](https://jsonpatch.com) operations in a specified Environment identified by the <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://app.configcat.com/sdkkey\">SDK key</a> passed in the `X-CONFIGCAT-SDKKEY` header.  Only the `value`, `rolloutRules` and `percentageRules` attributes are modifiable by this endpoint.  The advantage of using JSON Patch is that you can describe individual update operations on a resource without touching attributes that you don\'t want to change. It supports collection reordering, so it also  can be used for reordering the targeting rules of a Feature Flag or Setting.  For example: We have the following resource. ```json {   \"rolloutPercentageItems\": [     {       \"percentage\": 30,       \"value\": true     },     {       \"percentage\": 70,       \"value\": false     }   ],   \"rolloutRules\": [],   \"value\": false } ``` If we send an update request body as below: ```json [   {     \"op\": \"replace\",     \"path\": \"/value\",     \"value\": true   } ] ``` Only the default served value is going to be set to `true` and all the Percentage Rules are remaining unchanged. So we get a response like this: ```json {   \"rolloutPercentageItems\": [     {       \"percentage\": 30,       \"value\": true     },     {       \"percentage\": 70,       \"value\": false     }   ],   \"rolloutRules\": [],   \"value\": true } ```
     * @summary Update value
     * @param {string} settingKeyOrId The key or id of the Setting.
     * @param {Array<JsonPatchOperation>} jsonPatchOperation 
     * @param {string} [reason] The reason note for the Audit Log if the Product\&#39;s \&quot;Config changes require a reason\&quot; preference is turned on.
     * @param {string} [xCONFIGCATSDKKEY] The ConfigCat SDK Key. (https://app.configcat.com/sdkkey)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeatureFlagSettingValuesUsingSDKKeyApi
     */
    public updateSettingValueBySdkkey(settingKeyOrId: string, jsonPatchOperation: Array<JsonPatchOperation>, reason?: string, xCONFIGCATSDKKEY?: string, options?: RawAxiosRequestConfig) {
        return FeatureFlagSettingValuesUsingSDKKeyApiFp(this.configuration).updateSettingValueBySdkkey(settingKeyOrId, jsonPatchOperation, reason, xCONFIGCATSDKKEY, options).then((request) => request(this.axios, this.basePath));
    }
}

