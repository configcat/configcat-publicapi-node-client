/* tslint:disable */
/* eslint-disable */
/**
 * ConfigCat Public Management API
 * The purpose of this API is to access the ConfigCat platform programmatically. You can **Create**, **Read**, **Update** and **Delete** any entities like **Feature Flags, Configs, Environments** or **Products** within ConfigCat.  **Base API URL**: https://api.configcat.com  If you prefer the swagger documentation, you can find it here: [Swagger UI](https://api.configcat.com/swagger).  The API is based on HTTP REST, uses resource-oriented URLs, status codes and supports JSON  format.   **Important:** Do not use this API for accessing and evaluating feature flag values. Use the [SDKs](https://configcat.com/docs/sdk-reference/overview) or the [ConfigCat Proxy](https://configcat.com/docs/advanced/proxy/proxy-overview/) instead.  # OpenAPI Specification  The complete specification is publicly available in the following formats:  - [OpenAPI v3](https://api.configcat.com/docs/v1/swagger.json) - [Swagger v2](https://api.configcat.com/docs/v1/swagger.v2.json)  You can use it to generate client libraries in various languages with [OpenAPI Generator](https://github.com/OpenAPITools/openapi-generator) or [Swagger Codegen](https://swagger.io/tools/swagger-codegen/) to interact with this API.  # Authentication This API uses the [Basic HTTP Authentication Scheme](https://en.wikipedia.org/wiki/Basic_access_authentication).   <!-- ReDoc-Inject: <security-definitions> -->  # Throttling and rate limits All the rate limited API calls are returning information about the current rate limit period in the following HTTP headers:  | Header | Description | | :- | :- | | X-Rate-Limit-Remaining | The maximum number of requests remaining in the current rate limit period. | | X-Rate-Limit-Reset     | The time when the current rate limit period resets.        |  When the rate limit is exceeded by a request, the API returns with a `HTTP 429 - Too many requests` status along with a `Retry-After` HTTP header. 
 *
 * The version of the OpenAPI document: v1
 * Contact: support@configcat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { CreateIntegrationModel } from '../model';
// @ts-ignore
import { IntegrationModel } from '../model';
// @ts-ignore
import { IntegrationsModel } from '../model';
// @ts-ignore
import { ModifyIntegrationRequest } from '../model';
/**
 * IntegrationsApi - axios parameter creator
 * @export
 */
export const IntegrationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint creates a new Integration in a specified Product  identified by the `productId` parameter, which can be obtained from the [List Products](#operation/get-products) endpoint.  The Parameters dictionary differs for each IntegrationType: - Datadog  - `apikey`: Required. Datadog API key.  - `site`: Datadog site. Available values: `Us`, `Eu`, `Us1Fed`, `Us3`, `Us5`. Default: `Us`. - Slack    Connecting the Slack integration through the Public Management API will not post messages with the ConfigCat Feature Flags Slack app but with an incoming webhook.  - `incoming_webhook.url`: Required. The [incoming webhook URL](https://api.slack.com/messaging/webhooks) where the integration should post messages. - Amplitude  - `apiKey`: Required. Amplitude API Key.  - `secretKey`: Required. Amplitude Secret Key. - Mixpanel  - `serviceAccountUserName`: Required. Mixpanel Service Account Username.  - `serviceAccountSecret`: Required. Mixpanel Service Account Secret.  - `projectId`: Required. Mixpanel Project ID.  - `server`: Mixpanel Server. Available values: `StandardServer`, `EUResidencyServer`. Default: `StandardServer`. - Twilio Segment  - `writeKey`: Required. Twilio Segment Write Key.  - `server`: Twilio Segment Server. Available values: `Us`, `Eu`. Default: `Us`. - PubNub (work in progress)
         * @summary Create Integration
         * @param {string} productId The identifier of the Product.
         * @param {CreateIntegrationModel} createIntegrationModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createIntegration: async (productId: string, createIntegrationModel: CreateIntegrationModel, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('createIntegration', 'productId', productId)
            // verify required parameter 'createIntegrationModel' is not null or undefined
            assertParamExists('createIntegration', 'createIntegrationModel', createIntegrationModel)
            const localVarPath = `/v1/products/{productId}/integrations`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createIntegrationModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint removes a Integration identified by the `integrationId` parameter.
         * @summary Delete Integration
         * @param {string} integrationId The identifier of the Integration.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteIntegration: async (integrationId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'integrationId' is not null or undefined
            assertParamExists('deleteIntegration', 'integrationId', integrationId)
            const localVarPath = `/v1/integrations/{integrationId}`
                .replace(`{${"integrationId"}}`, encodeURIComponent(String(integrationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns the metadata of an Integration identified by the `integrationId`.
         * @summary Get Integration
         * @param {string} integrationId The identifier of the Integration.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIntegration: async (integrationId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'integrationId' is not null or undefined
            assertParamExists('getIntegration', 'integrationId', integrationId)
            const localVarPath = `/v1/integrations/{integrationId}`
                .replace(`{${"integrationId"}}`, encodeURIComponent(String(integrationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns the list of the Integrations that belongs to the given Product identified by the `productId` parameter, which can be obtained from the [List Products](#operation/get-products) endpoint.
         * @summary List Integrations
         * @param {string} productId The identifier of the Product.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIntegrations: async (productId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('getIntegrations', 'productId', productId)
            const localVarPath = `/v1/products/{productId}/integrations`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint updates a Config identified by the `integrationId` parameter.  The Parameters dictionary differs for each IntegrationType: - Datadog  - `apikey`: Required. Datadog API key.  - `site`: Datadog site. Available values: `Us`, `Eu`, `Us1Fed`, `Us3`, `Us5`. Default: `Us`. - Slack    Connecting the Slack integration through the Public Management API will not post messages with the ConfigCat Feature Flags Slack app but with an incoming webhook.  - `incoming_webhook.url`: Required. The [incoming webhook URL](https://api.slack.com/messaging/webhooks) where the integration should post messages. - Amplitude  - `apiKey`: Required. Amplitude API Key.  - `secretKey`: Required. Amplitude Secret Key. - Mixpanel  - `serviceAccountUserName`: Required. Mixpanel Service Account Username.  - `serviceAccountSecret`: Required. Mixpanel Service Account Secret.  - `projectId`: Required. Mixpanel Project ID.  - `server`: Mixpanel Server. Available values: `StandardServer`, `EUResidencyServer`. Default: `StandardServer`. - Twilio Segment  - `writeKey`: Required. Twilio Segment Write Key.  - `server`: Twilio Segment Server. Available values: `Us`, `Eu`. Default: `Us`. - PubNub (work in progress)
         * @summary Update Integration
         * @param {string} integrationId The identifier of the Integration.
         * @param {ModifyIntegrationRequest} modifyIntegrationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateIntegration: async (integrationId: string, modifyIntegrationRequest: ModifyIntegrationRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'integrationId' is not null or undefined
            assertParamExists('updateIntegration', 'integrationId', integrationId)
            // verify required parameter 'modifyIntegrationRequest' is not null or undefined
            assertParamExists('updateIntegration', 'modifyIntegrationRequest', modifyIntegrationRequest)
            const localVarPath = `/v1/integrations/{integrationId}`
                .replace(`{${"integrationId"}}`, encodeURIComponent(String(integrationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modifyIntegrationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IntegrationsApi - functional programming interface
 * @export
 */
export const IntegrationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = IntegrationsApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint creates a new Integration in a specified Product  identified by the `productId` parameter, which can be obtained from the [List Products](#operation/get-products) endpoint.  The Parameters dictionary differs for each IntegrationType: - Datadog  - `apikey`: Required. Datadog API key.  - `site`: Datadog site. Available values: `Us`, `Eu`, `Us1Fed`, `Us3`, `Us5`. Default: `Us`. - Slack    Connecting the Slack integration through the Public Management API will not post messages with the ConfigCat Feature Flags Slack app but with an incoming webhook.  - `incoming_webhook.url`: Required. The [incoming webhook URL](https://api.slack.com/messaging/webhooks) where the integration should post messages. - Amplitude  - `apiKey`: Required. Amplitude API Key.  - `secretKey`: Required. Amplitude Secret Key. - Mixpanel  - `serviceAccountUserName`: Required. Mixpanel Service Account Username.  - `serviceAccountSecret`: Required. Mixpanel Service Account Secret.  - `projectId`: Required. Mixpanel Project ID.  - `server`: Mixpanel Server. Available values: `StandardServer`, `EUResidencyServer`. Default: `StandardServer`. - Twilio Segment  - `writeKey`: Required. Twilio Segment Write Key.  - `server`: Twilio Segment Server. Available values: `Us`, `Eu`. Default: `Us`. - PubNub (work in progress)
         * @summary Create Integration
         * @param {string} productId The identifier of the Product.
         * @param {CreateIntegrationModel} createIntegrationModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createIntegration(productId: string, createIntegrationModel: CreateIntegrationModel, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IntegrationModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createIntegration(productId, createIntegrationModel, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IntegrationsApi.createIntegration']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This endpoint removes a Integration identified by the `integrationId` parameter.
         * @summary Delete Integration
         * @param {string} integrationId The identifier of the Integration.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteIntegration(integrationId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteIntegration(integrationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IntegrationsApi.deleteIntegration']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This endpoint returns the metadata of an Integration identified by the `integrationId`.
         * @summary Get Integration
         * @param {string} integrationId The identifier of the Integration.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIntegration(integrationId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IntegrationModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getIntegration(integrationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IntegrationsApi.getIntegration']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This endpoint returns the list of the Integrations that belongs to the given Product identified by the `productId` parameter, which can be obtained from the [List Products](#operation/get-products) endpoint.
         * @summary List Integrations
         * @param {string} productId The identifier of the Product.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIntegrations(productId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IntegrationsModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getIntegrations(productId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IntegrationsApi.getIntegrations']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This endpoint updates a Config identified by the `integrationId` parameter.  The Parameters dictionary differs for each IntegrationType: - Datadog  - `apikey`: Required. Datadog API key.  - `site`: Datadog site. Available values: `Us`, `Eu`, `Us1Fed`, `Us3`, `Us5`. Default: `Us`. - Slack    Connecting the Slack integration through the Public Management API will not post messages with the ConfigCat Feature Flags Slack app but with an incoming webhook.  - `incoming_webhook.url`: Required. The [incoming webhook URL](https://api.slack.com/messaging/webhooks) where the integration should post messages. - Amplitude  - `apiKey`: Required. Amplitude API Key.  - `secretKey`: Required. Amplitude Secret Key. - Mixpanel  - `serviceAccountUserName`: Required. Mixpanel Service Account Username.  - `serviceAccountSecret`: Required. Mixpanel Service Account Secret.  - `projectId`: Required. Mixpanel Project ID.  - `server`: Mixpanel Server. Available values: `StandardServer`, `EUResidencyServer`. Default: `StandardServer`. - Twilio Segment  - `writeKey`: Required. Twilio Segment Write Key.  - `server`: Twilio Segment Server. Available values: `Us`, `Eu`. Default: `Us`. - PubNub (work in progress)
         * @summary Update Integration
         * @param {string} integrationId The identifier of the Integration.
         * @param {ModifyIntegrationRequest} modifyIntegrationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateIntegration(integrationId: string, modifyIntegrationRequest: ModifyIntegrationRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IntegrationModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateIntegration(integrationId, modifyIntegrationRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IntegrationsApi.updateIntegration']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * IntegrationsApi - factory interface
 * @export
 */
export const IntegrationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = IntegrationsApiFp(configuration)
    return {
        /**
         * This endpoint creates a new Integration in a specified Product  identified by the `productId` parameter, which can be obtained from the [List Products](#operation/get-products) endpoint.  The Parameters dictionary differs for each IntegrationType: - Datadog  - `apikey`: Required. Datadog API key.  - `site`: Datadog site. Available values: `Us`, `Eu`, `Us1Fed`, `Us3`, `Us5`. Default: `Us`. - Slack    Connecting the Slack integration through the Public Management API will not post messages with the ConfigCat Feature Flags Slack app but with an incoming webhook.  - `incoming_webhook.url`: Required. The [incoming webhook URL](https://api.slack.com/messaging/webhooks) where the integration should post messages. - Amplitude  - `apiKey`: Required. Amplitude API Key.  - `secretKey`: Required. Amplitude Secret Key. - Mixpanel  - `serviceAccountUserName`: Required. Mixpanel Service Account Username.  - `serviceAccountSecret`: Required. Mixpanel Service Account Secret.  - `projectId`: Required. Mixpanel Project ID.  - `server`: Mixpanel Server. Available values: `StandardServer`, `EUResidencyServer`. Default: `StandardServer`. - Twilio Segment  - `writeKey`: Required. Twilio Segment Write Key.  - `server`: Twilio Segment Server. Available values: `Us`, `Eu`. Default: `Us`. - PubNub (work in progress)
         * @summary Create Integration
         * @param {string} productId The identifier of the Product.
         * @param {CreateIntegrationModel} createIntegrationModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createIntegration(productId: string, createIntegrationModel: CreateIntegrationModel, options?: any): AxiosPromise<IntegrationModel> {
            return localVarFp.createIntegration(productId, createIntegrationModel, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint removes a Integration identified by the `integrationId` parameter.
         * @summary Delete Integration
         * @param {string} integrationId The identifier of the Integration.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteIntegration(integrationId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteIntegration(integrationId, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns the metadata of an Integration identified by the `integrationId`.
         * @summary Get Integration
         * @param {string} integrationId The identifier of the Integration.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIntegration(integrationId: string, options?: any): AxiosPromise<IntegrationModel> {
            return localVarFp.getIntegration(integrationId, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns the list of the Integrations that belongs to the given Product identified by the `productId` parameter, which can be obtained from the [List Products](#operation/get-products) endpoint.
         * @summary List Integrations
         * @param {string} productId The identifier of the Product.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIntegrations(productId: string, options?: any): AxiosPromise<IntegrationsModel> {
            return localVarFp.getIntegrations(productId, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint updates a Config identified by the `integrationId` parameter.  The Parameters dictionary differs for each IntegrationType: - Datadog  - `apikey`: Required. Datadog API key.  - `site`: Datadog site. Available values: `Us`, `Eu`, `Us1Fed`, `Us3`, `Us5`. Default: `Us`. - Slack    Connecting the Slack integration through the Public Management API will not post messages with the ConfigCat Feature Flags Slack app but with an incoming webhook.  - `incoming_webhook.url`: Required. The [incoming webhook URL](https://api.slack.com/messaging/webhooks) where the integration should post messages. - Amplitude  - `apiKey`: Required. Amplitude API Key.  - `secretKey`: Required. Amplitude Secret Key. - Mixpanel  - `serviceAccountUserName`: Required. Mixpanel Service Account Username.  - `serviceAccountSecret`: Required. Mixpanel Service Account Secret.  - `projectId`: Required. Mixpanel Project ID.  - `server`: Mixpanel Server. Available values: `StandardServer`, `EUResidencyServer`. Default: `StandardServer`. - Twilio Segment  - `writeKey`: Required. Twilio Segment Write Key.  - `server`: Twilio Segment Server. Available values: `Us`, `Eu`. Default: `Us`. - PubNub (work in progress)
         * @summary Update Integration
         * @param {string} integrationId The identifier of the Integration.
         * @param {ModifyIntegrationRequest} modifyIntegrationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateIntegration(integrationId: string, modifyIntegrationRequest: ModifyIntegrationRequest, options?: any): AxiosPromise<IntegrationModel> {
            return localVarFp.updateIntegration(integrationId, modifyIntegrationRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * IntegrationsApi - object-oriented interface
 * @export
 * @class IntegrationsApi
 * @extends {BaseAPI}
 */
export class IntegrationsApi extends BaseAPI {
    /**
     * This endpoint creates a new Integration in a specified Product  identified by the `productId` parameter, which can be obtained from the [List Products](#operation/get-products) endpoint.  The Parameters dictionary differs for each IntegrationType: - Datadog  - `apikey`: Required. Datadog API key.  - `site`: Datadog site. Available values: `Us`, `Eu`, `Us1Fed`, `Us3`, `Us5`. Default: `Us`. - Slack    Connecting the Slack integration through the Public Management API will not post messages with the ConfigCat Feature Flags Slack app but with an incoming webhook.  - `incoming_webhook.url`: Required. The [incoming webhook URL](https://api.slack.com/messaging/webhooks) where the integration should post messages. - Amplitude  - `apiKey`: Required. Amplitude API Key.  - `secretKey`: Required. Amplitude Secret Key. - Mixpanel  - `serviceAccountUserName`: Required. Mixpanel Service Account Username.  - `serviceAccountSecret`: Required. Mixpanel Service Account Secret.  - `projectId`: Required. Mixpanel Project ID.  - `server`: Mixpanel Server. Available values: `StandardServer`, `EUResidencyServer`. Default: `StandardServer`. - Twilio Segment  - `writeKey`: Required. Twilio Segment Write Key.  - `server`: Twilio Segment Server. Available values: `Us`, `Eu`. Default: `Us`. - PubNub (work in progress)
     * @summary Create Integration
     * @param {string} productId The identifier of the Product.
     * @param {CreateIntegrationModel} createIntegrationModel 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrationsApi
     */
    public createIntegration(productId: string, createIntegrationModel: CreateIntegrationModel, options?: RawAxiosRequestConfig) {
        return IntegrationsApiFp(this.configuration).createIntegration(productId, createIntegrationModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint removes a Integration identified by the `integrationId` parameter.
     * @summary Delete Integration
     * @param {string} integrationId The identifier of the Integration.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrationsApi
     */
    public deleteIntegration(integrationId: string, options?: RawAxiosRequestConfig) {
        return IntegrationsApiFp(this.configuration).deleteIntegration(integrationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint returns the metadata of an Integration identified by the `integrationId`.
     * @summary Get Integration
     * @param {string} integrationId The identifier of the Integration.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrationsApi
     */
    public getIntegration(integrationId: string, options?: RawAxiosRequestConfig) {
        return IntegrationsApiFp(this.configuration).getIntegration(integrationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint returns the list of the Integrations that belongs to the given Product identified by the `productId` parameter, which can be obtained from the [List Products](#operation/get-products) endpoint.
     * @summary List Integrations
     * @param {string} productId The identifier of the Product.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrationsApi
     */
    public getIntegrations(productId: string, options?: RawAxiosRequestConfig) {
        return IntegrationsApiFp(this.configuration).getIntegrations(productId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint updates a Config identified by the `integrationId` parameter.  The Parameters dictionary differs for each IntegrationType: - Datadog  - `apikey`: Required. Datadog API key.  - `site`: Datadog site. Available values: `Us`, `Eu`, `Us1Fed`, `Us3`, `Us5`. Default: `Us`. - Slack    Connecting the Slack integration through the Public Management API will not post messages with the ConfigCat Feature Flags Slack app but with an incoming webhook.  - `incoming_webhook.url`: Required. The [incoming webhook URL](https://api.slack.com/messaging/webhooks) where the integration should post messages. - Amplitude  - `apiKey`: Required. Amplitude API Key.  - `secretKey`: Required. Amplitude Secret Key. - Mixpanel  - `serviceAccountUserName`: Required. Mixpanel Service Account Username.  - `serviceAccountSecret`: Required. Mixpanel Service Account Secret.  - `projectId`: Required. Mixpanel Project ID.  - `server`: Mixpanel Server. Available values: `StandardServer`, `EUResidencyServer`. Default: `StandardServer`. - Twilio Segment  - `writeKey`: Required. Twilio Segment Write Key.  - `server`: Twilio Segment Server. Available values: `Us`, `Eu`. Default: `Us`. - PubNub (work in progress)
     * @summary Update Integration
     * @param {string} integrationId The identifier of the Integration.
     * @param {ModifyIntegrationRequest} modifyIntegrationRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrationsApi
     */
    public updateIntegration(integrationId: string, modifyIntegrationRequest: ModifyIntegrationRequest, options?: RawAxiosRequestConfig) {
        return IntegrationsApiFp(this.configuration).updateIntegration(integrationId, modifyIntegrationRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

