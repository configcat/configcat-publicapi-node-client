/* tslint:disable */
/* eslint-disable */
/**
 * ConfigCat Public Management API
 * The purpose of this API is to access the ConfigCat platform programmatically. You can **Create**, **Read**, **Update** and **Delete** any entities like **Feature Flags, Configs, Environments** or **Products** within ConfigCat.  **Base API URL**: https://test-api.configcat.com  If you prefer the swagger documentation, you can find it here: [Swagger UI](https://test-api.configcat.com/swagger).  The API is based on HTTP REST, uses resource-oriented URLs, status codes and supports JSON  format. Do not use this API for accessing and evaluating feature flag values. Use the [SDKs instead](https://configcat.com/docs/sdk-reference/overview).   # OpenAPI Specification  The complete specification is publicly available in the following formats:  - [OpenAPI v3](https://test-api.configcat.com/docs/v1/swagger.json) - [Swagger v2](https://test-api.configcat.com/docs/v1/swagger.v2.json)  You can use it to generate client libraries in various languages with [OpenAPI Generator](https://github.com/OpenAPITools/openapi-generator) or [Swagger Codegen](https://swagger.io/tools/swagger-codegen/) to interact with this API.  # Authentication This API uses the [Basic HTTP Authentication Scheme](https://en.wikipedia.org/wiki/Basic_access_authentication).   <!-- ReDoc-Inject: <security-definitions> -->  # Throttling and rate limits All the rate limited API calls are returning information about the current rate limit period in the following HTTP headers:  | Header | Description | | :- | :- | | X-Rate-Limit-Remaining | The maximum number of requests remaining in the current rate limit period. | | X-Rate-Limit-Reset     | The time when the current rate limit period resets.        |  When the rate limit is exceeded by a request, the API returns with a `HTTP 429 - Too many requests` status along with a `Retry-After` HTTP header. 
 *
 * The version of the OpenAPI document: v1
 * Contact: support@configcat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { ConfigModel } from '../model';
// @ts-ignore
import { CreateConfigRequest } from '../model';
// @ts-ignore
import { UpdateConfigRequest } from '../model';
/**
 * ConfigsApi - axios parameter creator
 * @export
 */
export const ConfigsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint creates a new Config in a specified Product  identified by the `productId` parameter, which can be obtained from the [List Products](#operation/get-products) endpoint.
         * @summary Create Config
         * @param {string} productId The identifier of the Product.
         * @param {CreateConfigRequest} createConfigRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createConfig: async (productId: string, createConfigRequest: CreateConfigRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('createConfig', 'productId', productId)
            // verify required parameter 'createConfigRequest' is not null or undefined
            assertParamExists('createConfig', 'createConfigRequest', createConfigRequest)
            const localVarPath = `/v1/products/{productId}/configs`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createConfigRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint removes a Config identified by the `configId` parameter.
         * @summary Delete Config
         * @param {string} configId The identifier of the Config.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteConfig: async (configId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'configId' is not null or undefined
            assertParamExists('deleteConfig', 'configId', configId)
            const localVarPath = `/v1/configs/{configId}`
                .replace(`{${"configId"}}`, encodeURIComponent(String(configId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns the metadata of a Config identified by the `configId`.
         * @summary Get Config
         * @param {string} configId The identifier of the Config.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConfig: async (configId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'configId' is not null or undefined
            assertParamExists('getConfig', 'configId', configId)
            const localVarPath = `/v1/configs/{configId}`
                .replace(`{${"configId"}}`, encodeURIComponent(String(configId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns the list of the Configs that belongs to the given Product identified by the `productId` parameter, which can be obtained from the [List Products](#operation/get-products) endpoint.
         * @summary List Configs
         * @param {string} productId The identifier of the Product.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConfigs: async (productId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('getConfigs', 'productId', productId)
            const localVarPath = `/v1/products/{productId}/configs`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint updates a Config identified by the `configId` parameter.
         * @summary Update Config
         * @param {string} configId The identifier of the Config.
         * @param {UpdateConfigRequest} updateConfigRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateConfig: async (configId: string, updateConfigRequest: UpdateConfigRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'configId' is not null or undefined
            assertParamExists('updateConfig', 'configId', configId)
            // verify required parameter 'updateConfigRequest' is not null or undefined
            assertParamExists('updateConfig', 'updateConfigRequest', updateConfigRequest)
            const localVarPath = `/v1/configs/{configId}`
                .replace(`{${"configId"}}`, encodeURIComponent(String(configId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateConfigRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ConfigsApi - functional programming interface
 * @export
 */
export const ConfigsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ConfigsApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint creates a new Config in a specified Product  identified by the `productId` parameter, which can be obtained from the [List Products](#operation/get-products) endpoint.
         * @summary Create Config
         * @param {string} productId The identifier of the Product.
         * @param {CreateConfigRequest} createConfigRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createConfig(productId: string, createConfigRequest: CreateConfigRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConfigModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createConfig(productId, createConfigRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ConfigsApi.createConfig']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This endpoint removes a Config identified by the `configId` parameter.
         * @summary Delete Config
         * @param {string} configId The identifier of the Config.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteConfig(configId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteConfig(configId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ConfigsApi.deleteConfig']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This endpoint returns the metadata of a Config identified by the `configId`.
         * @summary Get Config
         * @param {string} configId The identifier of the Config.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getConfig(configId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConfigModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getConfig(configId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ConfigsApi.getConfig']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This endpoint returns the list of the Configs that belongs to the given Product identified by the `productId` parameter, which can be obtained from the [List Products](#operation/get-products) endpoint.
         * @summary List Configs
         * @param {string} productId The identifier of the Product.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getConfigs(productId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ConfigModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getConfigs(productId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ConfigsApi.getConfigs']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This endpoint updates a Config identified by the `configId` parameter.
         * @summary Update Config
         * @param {string} configId The identifier of the Config.
         * @param {UpdateConfigRequest} updateConfigRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateConfig(configId: string, updateConfigRequest: UpdateConfigRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConfigModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateConfig(configId, updateConfigRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ConfigsApi.updateConfig']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ConfigsApi - factory interface
 * @export
 */
export const ConfigsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ConfigsApiFp(configuration)
    return {
        /**
         * This endpoint creates a new Config in a specified Product  identified by the `productId` parameter, which can be obtained from the [List Products](#operation/get-products) endpoint.
         * @summary Create Config
         * @param {string} productId The identifier of the Product.
         * @param {CreateConfigRequest} createConfigRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createConfig(productId: string, createConfigRequest: CreateConfigRequest, options?: any): AxiosPromise<ConfigModel> {
            return localVarFp.createConfig(productId, createConfigRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint removes a Config identified by the `configId` parameter.
         * @summary Delete Config
         * @param {string} configId The identifier of the Config.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteConfig(configId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteConfig(configId, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns the metadata of a Config identified by the `configId`.
         * @summary Get Config
         * @param {string} configId The identifier of the Config.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConfig(configId: string, options?: any): AxiosPromise<ConfigModel> {
            return localVarFp.getConfig(configId, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns the list of the Configs that belongs to the given Product identified by the `productId` parameter, which can be obtained from the [List Products](#operation/get-products) endpoint.
         * @summary List Configs
         * @param {string} productId The identifier of the Product.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConfigs(productId: string, options?: any): AxiosPromise<Array<ConfigModel>> {
            return localVarFp.getConfigs(productId, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint updates a Config identified by the `configId` parameter.
         * @summary Update Config
         * @param {string} configId The identifier of the Config.
         * @param {UpdateConfigRequest} updateConfigRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateConfig(configId: string, updateConfigRequest: UpdateConfigRequest, options?: any): AxiosPromise<ConfigModel> {
            return localVarFp.updateConfig(configId, updateConfigRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ConfigsApi - object-oriented interface
 * @export
 * @class ConfigsApi
 * @extends {BaseAPI}
 */
export class ConfigsApi extends BaseAPI {
    /**
     * This endpoint creates a new Config in a specified Product  identified by the `productId` parameter, which can be obtained from the [List Products](#operation/get-products) endpoint.
     * @summary Create Config
     * @param {string} productId The identifier of the Product.
     * @param {CreateConfigRequest} createConfigRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigsApi
     */
    public createConfig(productId: string, createConfigRequest: CreateConfigRequest, options?: RawAxiosRequestConfig) {
        return ConfigsApiFp(this.configuration).createConfig(productId, createConfigRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint removes a Config identified by the `configId` parameter.
     * @summary Delete Config
     * @param {string} configId The identifier of the Config.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigsApi
     */
    public deleteConfig(configId: string, options?: RawAxiosRequestConfig) {
        return ConfigsApiFp(this.configuration).deleteConfig(configId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint returns the metadata of a Config identified by the `configId`.
     * @summary Get Config
     * @param {string} configId The identifier of the Config.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigsApi
     */
    public getConfig(configId: string, options?: RawAxiosRequestConfig) {
        return ConfigsApiFp(this.configuration).getConfig(configId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint returns the list of the Configs that belongs to the given Product identified by the `productId` parameter, which can be obtained from the [List Products](#operation/get-products) endpoint.
     * @summary List Configs
     * @param {string} productId The identifier of the Product.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigsApi
     */
    public getConfigs(productId: string, options?: RawAxiosRequestConfig) {
        return ConfigsApiFp(this.configuration).getConfigs(productId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint updates a Config identified by the `configId` parameter.
     * @summary Update Config
     * @param {string} configId The identifier of the Config.
     * @param {UpdateConfigRequest} updateConfigRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigsApi
     */
    public updateConfig(configId: string, updateConfigRequest: UpdateConfigRequest, options?: RawAxiosRequestConfig) {
        return ConfigsApiFp(this.configuration).updateConfig(configId, updateConfigRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

