/* tslint:disable */
/* eslint-disable */
/**
 * ConfigCat Public Management API
 * The purpose of this API is to access the ConfigCat platform programmatically. You can **Create**, **Read**, **Update** and **Delete** any entities like **Feature Flags, Configs, Environments** or **Products** within ConfigCat.  **Base API URL**: https://api.configcat.com  If you prefer the swagger documentation, you can find it here: [Swagger UI](https://api.configcat.com/swagger).  The API is based on HTTP REST, uses resource-oriented URLs, status codes and supports JSON  format.   **Important:** Do not use this API for accessing and evaluating feature flag values. Use the [SDKs](https://configcat.com/docs/sdk-reference/overview) or the [ConfigCat Proxy](https://configcat.com/docs/advanced/proxy/proxy-overview/) instead.  # OpenAPI Specification  The complete specification is publicly available in the following formats:  - [OpenAPI v3](https://api.configcat.com/docs/v1/swagger.json) - [Swagger v2](https://api.configcat.com/docs/v1/swagger.v2.json)  You can use it to generate client libraries in various languages with [OpenAPI Generator](https://github.com/OpenAPITools/openapi-generator) or [Swagger Codegen](https://swagger.io/tools/swagger-codegen/) to interact with this API.  # Authentication This API uses the [Basic HTTP Authentication Scheme](https://en.wikipedia.org/wiki/Basic_access_authentication).   <!-- ReDoc-Inject: <security-definitions> -->  # Throttling and rate limits All the rate limited API calls are returning information about the current rate limit period in the following HTTP headers:  | Header | Description | | :- | :- | | X-Rate-Limit-Remaining | The maximum number of requests remaining in the current rate limit period. | | X-Rate-Limit-Reset     | The time when the current rate limit period resets.        |  When the rate limit is exceeded by a request, the API returns with a `HTTP 429 - Too many requests` status along with a `Retry-After` HTTP header. 
 *
 * The version of the OpenAPI document: v1
 * Contact: support@configcat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { AddOrUpdateIntegrationLinkModel } from '../model';
// @ts-ignore
import { AddOrUpdateJiraIntegrationLinkModel } from '../model';
// @ts-ignore
import { ConnectRequest } from '../model';
// @ts-ignore
import { DeleteIntegrationLinkModel } from '../model';
// @ts-ignore
import { IntegrationLinkDetailsModel } from '../model';
// @ts-ignore
import { IntegrationLinkModel } from '../model';
/**
 * IntegrationLinksApi - axios parameter creator
 * @export
 */
export const IntegrationLinksApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add or update Integration link
         * @param {string} environmentId The identifier of the Environment.
         * @param {number} settingId The id of the Setting.
         * @param {AddOrUpdateIntegrationLinkIntegrationLinkTypeEnum} integrationLinkType The integration link\&#39;s type.
         * @param {string} key The key of the integration link.
         * @param {AddOrUpdateIntegrationLinkModel} [addOrUpdateIntegrationLinkModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addOrUpdateIntegrationLink: async (environmentId: string, settingId: number, integrationLinkType: AddOrUpdateIntegrationLinkIntegrationLinkTypeEnum, key: string, addOrUpdateIntegrationLinkModel?: AddOrUpdateIntegrationLinkModel, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'environmentId' is not null or undefined
            assertParamExists('addOrUpdateIntegrationLink', 'environmentId', environmentId)
            // verify required parameter 'settingId' is not null or undefined
            assertParamExists('addOrUpdateIntegrationLink', 'settingId', settingId)
            // verify required parameter 'integrationLinkType' is not null or undefined
            assertParamExists('addOrUpdateIntegrationLink', 'integrationLinkType', integrationLinkType)
            // verify required parameter 'key' is not null or undefined
            assertParamExists('addOrUpdateIntegrationLink', 'key', key)
            const localVarPath = `/v1/environments/{environmentId}/settings/{settingId}/integrationLinks/{integrationLinkType}/{key}`
                .replace(`{${"environmentId"}}`, encodeURIComponent(String(environmentId)))
                .replace(`{${"settingId"}}`, encodeURIComponent(String(settingId)))
                .replace(`{${"integrationLinkType"}}`, encodeURIComponent(String(integrationLinkType)))
                .replace(`{${"key"}}`, encodeURIComponent(String(key)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addOrUpdateIntegrationLinkModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Integration link
         * @param {string} environmentId The identifier of the Environment.
         * @param {number} settingId The id of the Setting.
         * @param {DeleteIntegrationLinkIntegrationLinkTypeEnum} integrationLinkType The integration\&#39;s type.
         * @param {string} key The key of the integration link.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteIntegrationLink: async (environmentId: string, settingId: number, integrationLinkType: DeleteIntegrationLinkIntegrationLinkTypeEnum, key: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'environmentId' is not null or undefined
            assertParamExists('deleteIntegrationLink', 'environmentId', environmentId)
            // verify required parameter 'settingId' is not null or undefined
            assertParamExists('deleteIntegrationLink', 'settingId', settingId)
            // verify required parameter 'integrationLinkType' is not null or undefined
            assertParamExists('deleteIntegrationLink', 'integrationLinkType', integrationLinkType)
            // verify required parameter 'key' is not null or undefined
            assertParamExists('deleteIntegrationLink', 'key', key)
            const localVarPath = `/v1/environments/{environmentId}/settings/{settingId}/integrationLinks/{integrationLinkType}/{key}`
                .replace(`{${"environmentId"}}`, encodeURIComponent(String(environmentId)))
                .replace(`{${"settingId"}}`, encodeURIComponent(String(settingId)))
                .replace(`{${"integrationLinkType"}}`, encodeURIComponent(String(integrationLinkType)))
                .replace(`{${"key"}}`, encodeURIComponent(String(key)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Integration link
         * @param {GetIntegrationLinkDetailsIntegrationLinkTypeEnum} integrationLinkType The integration link\&#39;s type.
         * @param {string} key The key of the integration link.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIntegrationLinkDetails: async (integrationLinkType: GetIntegrationLinkDetailsIntegrationLinkTypeEnum, key: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'integrationLinkType' is not null or undefined
            assertParamExists('getIntegrationLinkDetails', 'integrationLinkType', integrationLinkType)
            // verify required parameter 'key' is not null or undefined
            assertParamExists('getIntegrationLinkDetails', 'key', key)
            const localVarPath = `/v1/integrationLink/{integrationLinkType}/{key}/details`
                .replace(`{${"integrationLinkType"}}`, encodeURIComponent(String(integrationLinkType)))
                .replace(`{${"key"}}`, encodeURIComponent(String(key)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} environmentId The identifier of the Environment.
         * @param {number} settingId The id of the Setting.
         * @param {string} key The key of the integration link.
         * @param {AddOrUpdateJiraIntegrationLinkModel} [addOrUpdateJiraIntegrationLinkModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jiraAddOrUpdateIntegrationLink: async (environmentId: string, settingId: number, key: string, addOrUpdateJiraIntegrationLinkModel?: AddOrUpdateJiraIntegrationLinkModel, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'environmentId' is not null or undefined
            assertParamExists('jiraAddOrUpdateIntegrationLink', 'environmentId', environmentId)
            // verify required parameter 'settingId' is not null or undefined
            assertParamExists('jiraAddOrUpdateIntegrationLink', 'settingId', settingId)
            // verify required parameter 'key' is not null or undefined
            assertParamExists('jiraAddOrUpdateIntegrationLink', 'key', key)
            const localVarPath = `/v1/jira/environments/{environmentId}/settings/{settingId}/integrationLinks/{key}`
                .replace(`{${"environmentId"}}`, encodeURIComponent(String(environmentId)))
                .replace(`{${"settingId"}}`, encodeURIComponent(String(settingId)))
                .replace(`{${"key"}}`, encodeURIComponent(String(key)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addOrUpdateJiraIntegrationLinkModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ConnectRequest} [connectRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jiraConnect: async (connectRequest?: ConnectRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/jira/connect`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(connectRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IntegrationLinksApi - functional programming interface
 * @export
 */
export const IntegrationLinksApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = IntegrationLinksApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add or update Integration link
         * @param {string} environmentId The identifier of the Environment.
         * @param {number} settingId The id of the Setting.
         * @param {AddOrUpdateIntegrationLinkIntegrationLinkTypeEnum} integrationLinkType The integration link\&#39;s type.
         * @param {string} key The key of the integration link.
         * @param {AddOrUpdateIntegrationLinkModel} [addOrUpdateIntegrationLinkModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addOrUpdateIntegrationLink(environmentId: string, settingId: number, integrationLinkType: AddOrUpdateIntegrationLinkIntegrationLinkTypeEnum, key: string, addOrUpdateIntegrationLinkModel?: AddOrUpdateIntegrationLinkModel, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IntegrationLinkModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addOrUpdateIntegrationLink(environmentId, settingId, integrationLinkType, key, addOrUpdateIntegrationLinkModel, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IntegrationLinksApi.addOrUpdateIntegrationLink']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete Integration link
         * @param {string} environmentId The identifier of the Environment.
         * @param {number} settingId The id of the Setting.
         * @param {DeleteIntegrationLinkIntegrationLinkTypeEnum} integrationLinkType The integration\&#39;s type.
         * @param {string} key The key of the integration link.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteIntegrationLink(environmentId: string, settingId: number, integrationLinkType: DeleteIntegrationLinkIntegrationLinkTypeEnum, key: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteIntegrationLinkModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteIntegrationLink(environmentId, settingId, integrationLinkType, key, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IntegrationLinksApi.deleteIntegrationLink']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Integration link
         * @param {GetIntegrationLinkDetailsIntegrationLinkTypeEnum} integrationLinkType The integration link\&#39;s type.
         * @param {string} key The key of the integration link.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIntegrationLinkDetails(integrationLinkType: GetIntegrationLinkDetailsIntegrationLinkTypeEnum, key: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IntegrationLinkDetailsModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getIntegrationLinkDetails(integrationLinkType, key, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IntegrationLinksApi.getIntegrationLinkDetails']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} environmentId The identifier of the Environment.
         * @param {number} settingId The id of the Setting.
         * @param {string} key The key of the integration link.
         * @param {AddOrUpdateJiraIntegrationLinkModel} [addOrUpdateJiraIntegrationLinkModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jiraAddOrUpdateIntegrationLink(environmentId: string, settingId: number, key: string, addOrUpdateJiraIntegrationLinkModel?: AddOrUpdateJiraIntegrationLinkModel, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IntegrationLinkModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jiraAddOrUpdateIntegrationLink(environmentId, settingId, key, addOrUpdateJiraIntegrationLinkModel, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IntegrationLinksApi.jiraAddOrUpdateIntegrationLink']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ConnectRequest} [connectRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jiraConnect(connectRequest?: ConnectRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jiraConnect(connectRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IntegrationLinksApi.jiraConnect']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * IntegrationLinksApi - factory interface
 * @export
 */
export const IntegrationLinksApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = IntegrationLinksApiFp(configuration)
    return {
        /**
         * 
         * @summary Add or update Integration link
         * @param {string} environmentId The identifier of the Environment.
         * @param {number} settingId The id of the Setting.
         * @param {AddOrUpdateIntegrationLinkIntegrationLinkTypeEnum} integrationLinkType The integration link\&#39;s type.
         * @param {string} key The key of the integration link.
         * @param {AddOrUpdateIntegrationLinkModel} [addOrUpdateIntegrationLinkModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addOrUpdateIntegrationLink(environmentId: string, settingId: number, integrationLinkType: AddOrUpdateIntegrationLinkIntegrationLinkTypeEnum, key: string, addOrUpdateIntegrationLinkModel?: AddOrUpdateIntegrationLinkModel, options?: any): AxiosPromise<IntegrationLinkModel> {
            return localVarFp.addOrUpdateIntegrationLink(environmentId, settingId, integrationLinkType, key, addOrUpdateIntegrationLinkModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Integration link
         * @param {string} environmentId The identifier of the Environment.
         * @param {number} settingId The id of the Setting.
         * @param {DeleteIntegrationLinkIntegrationLinkTypeEnum} integrationLinkType The integration\&#39;s type.
         * @param {string} key The key of the integration link.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteIntegrationLink(environmentId: string, settingId: number, integrationLinkType: DeleteIntegrationLinkIntegrationLinkTypeEnum, key: string, options?: any): AxiosPromise<DeleteIntegrationLinkModel> {
            return localVarFp.deleteIntegrationLink(environmentId, settingId, integrationLinkType, key, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Integration link
         * @param {GetIntegrationLinkDetailsIntegrationLinkTypeEnum} integrationLinkType The integration link\&#39;s type.
         * @param {string} key The key of the integration link.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIntegrationLinkDetails(integrationLinkType: GetIntegrationLinkDetailsIntegrationLinkTypeEnum, key: string, options?: any): AxiosPromise<IntegrationLinkDetailsModel> {
            return localVarFp.getIntegrationLinkDetails(integrationLinkType, key, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} environmentId The identifier of the Environment.
         * @param {number} settingId The id of the Setting.
         * @param {string} key The key of the integration link.
         * @param {AddOrUpdateJiraIntegrationLinkModel} [addOrUpdateJiraIntegrationLinkModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jiraAddOrUpdateIntegrationLink(environmentId: string, settingId: number, key: string, addOrUpdateJiraIntegrationLinkModel?: AddOrUpdateJiraIntegrationLinkModel, options?: any): AxiosPromise<IntegrationLinkModel> {
            return localVarFp.jiraAddOrUpdateIntegrationLink(environmentId, settingId, key, addOrUpdateJiraIntegrationLinkModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ConnectRequest} [connectRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jiraConnect(connectRequest?: ConnectRequest, options?: any): AxiosPromise<void> {
            return localVarFp.jiraConnect(connectRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * IntegrationLinksApi - object-oriented interface
 * @export
 * @class IntegrationLinksApi
 * @extends {BaseAPI}
 */
export class IntegrationLinksApi extends BaseAPI {
    /**
     * 
     * @summary Add or update Integration link
     * @param {string} environmentId The identifier of the Environment.
     * @param {number} settingId The id of the Setting.
     * @param {AddOrUpdateIntegrationLinkIntegrationLinkTypeEnum} integrationLinkType The integration link\&#39;s type.
     * @param {string} key The key of the integration link.
     * @param {AddOrUpdateIntegrationLinkModel} [addOrUpdateIntegrationLinkModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrationLinksApi
     */
    public addOrUpdateIntegrationLink(environmentId: string, settingId: number, integrationLinkType: AddOrUpdateIntegrationLinkIntegrationLinkTypeEnum, key: string, addOrUpdateIntegrationLinkModel?: AddOrUpdateIntegrationLinkModel, options?: RawAxiosRequestConfig) {
        return IntegrationLinksApiFp(this.configuration).addOrUpdateIntegrationLink(environmentId, settingId, integrationLinkType, key, addOrUpdateIntegrationLinkModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Integration link
     * @param {string} environmentId The identifier of the Environment.
     * @param {number} settingId The id of the Setting.
     * @param {DeleteIntegrationLinkIntegrationLinkTypeEnum} integrationLinkType The integration\&#39;s type.
     * @param {string} key The key of the integration link.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrationLinksApi
     */
    public deleteIntegrationLink(environmentId: string, settingId: number, integrationLinkType: DeleteIntegrationLinkIntegrationLinkTypeEnum, key: string, options?: RawAxiosRequestConfig) {
        return IntegrationLinksApiFp(this.configuration).deleteIntegrationLink(environmentId, settingId, integrationLinkType, key, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Integration link
     * @param {GetIntegrationLinkDetailsIntegrationLinkTypeEnum} integrationLinkType The integration link\&#39;s type.
     * @param {string} key The key of the integration link.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrationLinksApi
     */
    public getIntegrationLinkDetails(integrationLinkType: GetIntegrationLinkDetailsIntegrationLinkTypeEnum, key: string, options?: RawAxiosRequestConfig) {
        return IntegrationLinksApiFp(this.configuration).getIntegrationLinkDetails(integrationLinkType, key, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} environmentId The identifier of the Environment.
     * @param {number} settingId The id of the Setting.
     * @param {string} key The key of the integration link.
     * @param {AddOrUpdateJiraIntegrationLinkModel} [addOrUpdateJiraIntegrationLinkModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrationLinksApi
     */
    public jiraAddOrUpdateIntegrationLink(environmentId: string, settingId: number, key: string, addOrUpdateJiraIntegrationLinkModel?: AddOrUpdateJiraIntegrationLinkModel, options?: RawAxiosRequestConfig) {
        return IntegrationLinksApiFp(this.configuration).jiraAddOrUpdateIntegrationLink(environmentId, settingId, key, addOrUpdateJiraIntegrationLinkModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ConnectRequest} [connectRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IntegrationLinksApi
     */
    public jiraConnect(connectRequest?: ConnectRequest, options?: RawAxiosRequestConfig) {
        return IntegrationLinksApiFp(this.configuration).jiraConnect(connectRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const AddOrUpdateIntegrationLinkIntegrationLinkTypeEnum = {
    Trello: 'trello',
    Jira: 'jira',
    Monday: 'monday'
} as const;
export type AddOrUpdateIntegrationLinkIntegrationLinkTypeEnum = typeof AddOrUpdateIntegrationLinkIntegrationLinkTypeEnum[keyof typeof AddOrUpdateIntegrationLinkIntegrationLinkTypeEnum];
/**
 * @export
 */
export const DeleteIntegrationLinkIntegrationLinkTypeEnum = {
    Trello: 'trello',
    Jira: 'jira',
    Monday: 'monday'
} as const;
export type DeleteIntegrationLinkIntegrationLinkTypeEnum = typeof DeleteIntegrationLinkIntegrationLinkTypeEnum[keyof typeof DeleteIntegrationLinkIntegrationLinkTypeEnum];
/**
 * @export
 */
export const GetIntegrationLinkDetailsIntegrationLinkTypeEnum = {
    Trello: 'trello',
    Jira: 'jira',
    Monday: 'monday'
} as const;
export type GetIntegrationLinkDetailsIntegrationLinkTypeEnum = typeof GetIntegrationLinkDetailsIntegrationLinkTypeEnum[keyof typeof GetIntegrationLinkDetailsIntegrationLinkTypeEnum];
