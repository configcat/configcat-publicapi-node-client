/* tslint:disable */
/* eslint-disable */
/**
 * ConfigCat Public Management API
 * The purpose of this API is to access the ConfigCat platform programmatically. You can **Create**, **Read**, **Update** and **Delete** any entities like **Feature Flags, Configs, Environments** or **Products** within ConfigCat.  **Base API URL**: https://api.configcat.com  If you prefer the swagger documentation, you can find it here: [Swagger UI](https://api.configcat.com/swagger).  The API is based on HTTP REST, uses resource-oriented URLs, status codes and supports JSON  format.   **Important:** Do not use this API for accessing and evaluating feature flag values. Use the [SDKs](https://configcat.com/docs/sdk-reference/overview) or the [ConfigCat Proxy](https://configcat.com/docs/advanced/proxy/proxy-overview/) instead.  # OpenAPI Specification  The complete specification is publicly available in the following formats:  - [OpenAPI v3](https://api.configcat.com/docs/v1/swagger.json) - [Swagger v2](https://api.configcat.com/docs/v1/swagger.v2.json)  You can use it to generate client libraries in various languages with [OpenAPI Generator](https://github.com/OpenAPITools/openapi-generator) or [Swagger Codegen](https://swagger.io/tools/swagger-codegen/) to interact with this API.  # Authentication This API uses the [Basic HTTP Authentication Scheme](https://en.wikipedia.org/wiki/Basic_access_authentication).   <!-- ReDoc-Inject: <security-definitions> -->  # Throttling and rate limits All the rate limited API calls are returning information about the current rate limit period in the following HTTP headers:  | Header | Description | | :- | :- | | X-Rate-Limit-Remaining | The maximum number of requests remaining in the current rate limit period. | | X-Rate-Limit-Reset     | The time when the current rate limit period resets.        |  When the rate limit is exceeded by a request, the API returns with a `HTTP 429 - Too many requests` status along with a `Retry-After` HTTP header. 
 *
 * The version of the OpenAPI document: v1
 * Contact: support@configcat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { AuditLogItemModel } from '../model';
// @ts-ignore
import { AuditLogType } from '../model';
// @ts-ignore
import { SettingModel } from '../model';
/**
 * AuditLogsApi - axios parameter creator
 * @export
 */
export const AuditLogsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint returns the list of Audit log items for a given Product  and the result can be optionally filtered by Config and/or Environment.
         * @summary List Audit log items for Product
         * @param {string} productId The identifier of the Product.
         * @param {string} [configId] The identifier of the Config.
         * @param {string} [environmentId] The identifier of the Environment.
         * @param {AuditLogType | null} [auditLogType] Filter Audit logs by Audit log type.
         * @param {string} [fromUtcDateTime] Filter Audit logs by starting UTC date.
         * @param {string} [toUtcDateTime] Filter Audit logs by ending UTC date.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuditlogs: async (productId: string, configId?: string, environmentId?: string, auditLogType?: AuditLogType | null, fromUtcDateTime?: string, toUtcDateTime?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('getAuditlogs', 'productId', productId)
            const localVarPath = `/v1/products/{productId}/auditlogs`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (configId !== undefined) {
                localVarQueryParameter['configId'] = configId;
            }

            if (environmentId !== undefined) {
                localVarQueryParameter['environmentId'] = environmentId;
            }

            if (auditLogType !== undefined) {
                localVarQueryParameter['auditLogType'] = auditLogType;
            }

            if (fromUtcDateTime !== undefined) {
                localVarQueryParameter['fromUtcDateTime'] = (fromUtcDateTime as any instanceof Date) ?
                    (fromUtcDateTime as any).toISOString() :
                    fromUtcDateTime;
            }

            if (toUtcDateTime !== undefined) {
                localVarQueryParameter['toUtcDateTime'] = (toUtcDateTime as any instanceof Date) ?
                    (toUtcDateTime as any).toISOString() :
                    toUtcDateTime;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns the list of Feature Flags and Settings that were deleted from the given Config.
         * @summary List Deleted Settings
         * @param {string} configId The identifier of the Config.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeletedSettings: async (configId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'configId' is not null or undefined
            assertParamExists('getDeletedSettings', 'configId', configId)
            const localVarPath = `/v1/configs/{configId}/deleted-settings`
                .replace(`{${"configId"}}`, encodeURIComponent(String(configId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns the list of Audit log items for a given Organization  and the result can be optionally filtered by Product and/or Config and/or Environment.
         * @summary List Audit log items for Organization
         * @param {string} organizationId The identifier of the Organization.
         * @param {string} [productId] The identifier of the Product.
         * @param {string} [configId] The identifier of the Config.
         * @param {string} [environmentId] The identifier of the Environment.
         * @param {AuditLogType | null} [auditLogType] Filter Audit logs by Audit log type.
         * @param {string} [fromUtcDateTime] Filter Audit logs by starting UTC date.
         * @param {string} [toUtcDateTime] Filter Audit logs by ending UTC date.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationAuditlogs: async (organizationId: string, productId?: string, configId?: string, environmentId?: string, auditLogType?: AuditLogType | null, fromUtcDateTime?: string, toUtcDateTime?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('getOrganizationAuditlogs', 'organizationId', organizationId)
            const localVarPath = `/v1/organizations/{organizationId}/auditlogs`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (productId !== undefined) {
                localVarQueryParameter['productId'] = productId;
            }

            if (configId !== undefined) {
                localVarQueryParameter['configId'] = configId;
            }

            if (environmentId !== undefined) {
                localVarQueryParameter['environmentId'] = environmentId;
            }

            if (auditLogType !== undefined) {
                localVarQueryParameter['auditLogType'] = auditLogType;
            }

            if (fromUtcDateTime !== undefined) {
                localVarQueryParameter['fromUtcDateTime'] = (fromUtcDateTime as any instanceof Date) ?
                    (fromUtcDateTime as any).toISOString() :
                    fromUtcDateTime;
            }

            if (toUtcDateTime !== undefined) {
                localVarQueryParameter['toUtcDateTime'] = (toUtcDateTime as any instanceof Date) ?
                    (toUtcDateTime as any).toISOString() :
                    toUtcDateTime;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuditLogsApi - functional programming interface
 * @export
 */
export const AuditLogsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuditLogsApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint returns the list of Audit log items for a given Product  and the result can be optionally filtered by Config and/or Environment.
         * @summary List Audit log items for Product
         * @param {string} productId The identifier of the Product.
         * @param {string} [configId] The identifier of the Config.
         * @param {string} [environmentId] The identifier of the Environment.
         * @param {AuditLogType | null} [auditLogType] Filter Audit logs by Audit log type.
         * @param {string} [fromUtcDateTime] Filter Audit logs by starting UTC date.
         * @param {string} [toUtcDateTime] Filter Audit logs by ending UTC date.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAuditlogs(productId: string, configId?: string, environmentId?: string, auditLogType?: AuditLogType | null, fromUtcDateTime?: string, toUtcDateTime?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AuditLogItemModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAuditlogs(productId, configId, environmentId, auditLogType, fromUtcDateTime, toUtcDateTime, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuditLogsApi.getAuditlogs']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This endpoint returns the list of Feature Flags and Settings that were deleted from the given Config.
         * @summary List Deleted Settings
         * @param {string} configId The identifier of the Config.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDeletedSettings(configId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SettingModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDeletedSettings(configId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuditLogsApi.getDeletedSettings']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This endpoint returns the list of Audit log items for a given Organization  and the result can be optionally filtered by Product and/or Config and/or Environment.
         * @summary List Audit log items for Organization
         * @param {string} organizationId The identifier of the Organization.
         * @param {string} [productId] The identifier of the Product.
         * @param {string} [configId] The identifier of the Config.
         * @param {string} [environmentId] The identifier of the Environment.
         * @param {AuditLogType | null} [auditLogType] Filter Audit logs by Audit log type.
         * @param {string} [fromUtcDateTime] Filter Audit logs by starting UTC date.
         * @param {string} [toUtcDateTime] Filter Audit logs by ending UTC date.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrganizationAuditlogs(organizationId: string, productId?: string, configId?: string, environmentId?: string, auditLogType?: AuditLogType | null, fromUtcDateTime?: string, toUtcDateTime?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AuditLogItemModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrganizationAuditlogs(organizationId, productId, configId, environmentId, auditLogType, fromUtcDateTime, toUtcDateTime, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuditLogsApi.getOrganizationAuditlogs']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuditLogsApi - factory interface
 * @export
 */
export const AuditLogsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuditLogsApiFp(configuration)
    return {
        /**
         * This endpoint returns the list of Audit log items for a given Product  and the result can be optionally filtered by Config and/or Environment.
         * @summary List Audit log items for Product
         * @param {string} productId The identifier of the Product.
         * @param {string} [configId] The identifier of the Config.
         * @param {string} [environmentId] The identifier of the Environment.
         * @param {AuditLogType | null} [auditLogType] Filter Audit logs by Audit log type.
         * @param {string} [fromUtcDateTime] Filter Audit logs by starting UTC date.
         * @param {string} [toUtcDateTime] Filter Audit logs by ending UTC date.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuditlogs(productId: string, configId?: string, environmentId?: string, auditLogType?: AuditLogType | null, fromUtcDateTime?: string, toUtcDateTime?: string, options?: any): AxiosPromise<Array<AuditLogItemModel>> {
            return localVarFp.getAuditlogs(productId, configId, environmentId, auditLogType, fromUtcDateTime, toUtcDateTime, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns the list of Feature Flags and Settings that were deleted from the given Config.
         * @summary List Deleted Settings
         * @param {string} configId The identifier of the Config.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeletedSettings(configId: string, options?: any): AxiosPromise<Array<SettingModel>> {
            return localVarFp.getDeletedSettings(configId, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns the list of Audit log items for a given Organization  and the result can be optionally filtered by Product and/or Config and/or Environment.
         * @summary List Audit log items for Organization
         * @param {string} organizationId The identifier of the Organization.
         * @param {string} [productId] The identifier of the Product.
         * @param {string} [configId] The identifier of the Config.
         * @param {string} [environmentId] The identifier of the Environment.
         * @param {AuditLogType | null} [auditLogType] Filter Audit logs by Audit log type.
         * @param {string} [fromUtcDateTime] Filter Audit logs by starting UTC date.
         * @param {string} [toUtcDateTime] Filter Audit logs by ending UTC date.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationAuditlogs(organizationId: string, productId?: string, configId?: string, environmentId?: string, auditLogType?: AuditLogType | null, fromUtcDateTime?: string, toUtcDateTime?: string, options?: any): AxiosPromise<Array<AuditLogItemModel>> {
            return localVarFp.getOrganizationAuditlogs(organizationId, productId, configId, environmentId, auditLogType, fromUtcDateTime, toUtcDateTime, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuditLogsApi - object-oriented interface
 * @export
 * @class AuditLogsApi
 * @extends {BaseAPI}
 */
export class AuditLogsApi extends BaseAPI {
    /**
     * This endpoint returns the list of Audit log items for a given Product  and the result can be optionally filtered by Config and/or Environment.
     * @summary List Audit log items for Product
     * @param {string} productId The identifier of the Product.
     * @param {string} [configId] The identifier of the Config.
     * @param {string} [environmentId] The identifier of the Environment.
     * @param {AuditLogType | null} [auditLogType] Filter Audit logs by Audit log type.
     * @param {string} [fromUtcDateTime] Filter Audit logs by starting UTC date.
     * @param {string} [toUtcDateTime] Filter Audit logs by ending UTC date.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuditLogsApi
     */
    public getAuditlogs(productId: string, configId?: string, environmentId?: string, auditLogType?: AuditLogType | null, fromUtcDateTime?: string, toUtcDateTime?: string, options?: RawAxiosRequestConfig) {
        return AuditLogsApiFp(this.configuration).getAuditlogs(productId, configId, environmentId, auditLogType, fromUtcDateTime, toUtcDateTime, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint returns the list of Feature Flags and Settings that were deleted from the given Config.
     * @summary List Deleted Settings
     * @param {string} configId The identifier of the Config.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuditLogsApi
     */
    public getDeletedSettings(configId: string, options?: RawAxiosRequestConfig) {
        return AuditLogsApiFp(this.configuration).getDeletedSettings(configId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint returns the list of Audit log items for a given Organization  and the result can be optionally filtered by Product and/or Config and/or Environment.
     * @summary List Audit log items for Organization
     * @param {string} organizationId The identifier of the Organization.
     * @param {string} [productId] The identifier of the Product.
     * @param {string} [configId] The identifier of the Config.
     * @param {string} [environmentId] The identifier of the Environment.
     * @param {AuditLogType | null} [auditLogType] Filter Audit logs by Audit log type.
     * @param {string} [fromUtcDateTime] Filter Audit logs by starting UTC date.
     * @param {string} [toUtcDateTime] Filter Audit logs by ending UTC date.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuditLogsApi
     */
    public getOrganizationAuditlogs(organizationId: string, productId?: string, configId?: string, environmentId?: string, auditLogType?: AuditLogType | null, fromUtcDateTime?: string, toUtcDateTime?: string, options?: RawAxiosRequestConfig) {
        return AuditLogsApiFp(this.configuration).getOrganizationAuditlogs(organizationId, productId, configId, environmentId, auditLogType, fromUtcDateTime, toUtcDateTime, options).then((request) => request(this.axios, this.basePath));
    }
}

