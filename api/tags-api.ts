/* tslint:disable */
/* eslint-disable */
/**
 * ConfigCat Public Management API
 * The purpose of this API is to access the ConfigCat platform programmatically. You can **Create**, **Read**, **Update** and **Delete** any entities like **Feature Flags, Configs, Environments** or **Products** within ConfigCat.  **Base API URL**: https://api.configcat.com  If you prefer the swagger documentation, you can find it here: [Swagger UI](https://api.configcat.com/swagger).  The API is based on HTTP REST, uses resource-oriented URLs, status codes and supports JSON  format.   **Important:** Do not use this API for accessing and evaluating feature flag values. Use the [SDKs](https://configcat.com/docs/sdk-reference/overview) or the [ConfigCat Proxy](https://configcat.com/docs/advanced/proxy/proxy-overview/) instead.  # OpenAPI Specification  The complete specification is publicly available in the following formats:  - [OpenAPI v3](https://api.configcat.com/docs/v1/swagger.json) - [Swagger v2](https://api.configcat.com/docs/v1/swagger.v2.json)  You can use it to generate client libraries in various languages with [OpenAPI Generator](https://github.com/OpenAPITools/openapi-generator) or [Swagger Codegen](https://swagger.io/tools/swagger-codegen/) to interact with this API.  # Authentication This API uses the [Basic HTTP Authentication Scheme](https://en.wikipedia.org/wiki/Basic_access_authentication).   <!-- ReDoc-Inject: <security-definitions> -->  # Throttling and rate limits All the rate limited API calls are returning information about the current rate limit period in the following HTTP headers:  | Header | Description | | :- | :- | | X-Rate-Limit-Remaining | The maximum number of requests remaining in the current rate limit period. | | X-Rate-Limit-Reset     | The time when the current rate limit period resets.        |  When the rate limit is exceeded by a request, the API returns with a `HTTP 429 - Too many requests` status along with a `Retry-After` HTTP header. 
 *
 * The version of the OpenAPI document: v1
 * Contact: support@configcat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { CreateTagModel } from '../model';
// @ts-ignore
import { SettingModel } from '../model';
// @ts-ignore
import { TagModel } from '../model';
// @ts-ignore
import { UpdateTagModel } from '../model';
/**
 * TagsApi - axios parameter creator
 * @export
 */
export const TagsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint creates a new Tag in a specified Product  identified by the `productId` parameter, which can be obtained from the [List Products](#operation/get-products) endpoint.
         * @summary Create Tag
         * @param {string} productId The identifier of the Organization.
         * @param {CreateTagModel} createTagModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTag: async (productId: string, createTagModel: CreateTagModel, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('createTag', 'productId', productId)
            // verify required parameter 'createTagModel' is not null or undefined
            assertParamExists('createTag', 'createTagModel', createTagModel)
            const localVarPath = `/v1/products/{productId}/tags`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createTagModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint deletes a Tag identified by the `tagId` parameter. To remove a Tag from a Feature Flag or Setting use the [Update Flag](#operation/update-setting) endpoint.
         * @summary Delete Tag
         * @param {number} tagId The identifier of the Tag.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTag: async (tagId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tagId' is not null or undefined
            assertParamExists('deleteTag', 'tagId', tagId)
            const localVarPath = `/v1/tags/{tagId}`
                .replace(`{${"tagId"}}`, encodeURIComponent(String(tagId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns the list of the Settings that  has the specified Tag, identified by the `tagId` parameter.
         * @summary List Settings by Tag
         * @param {number} tagId The identifier of the Tag.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSettingsByTag: async (tagId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tagId' is not null or undefined
            assertParamExists('getSettingsByTag', 'tagId', tagId)
            const localVarPath = `/v1/tags/{tagId}/settings`
                .replace(`{${"tagId"}}`, encodeURIComponent(String(tagId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns the metadata of a Tag  identified by the `tagId`.
         * @summary Get Tag
         * @param {number} tagId The identifier of the Tag.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTag: async (tagId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tagId' is not null or undefined
            assertParamExists('getTag', 'tagId', tagId)
            const localVarPath = `/v1/tags/{tagId}`
                .replace(`{${"tagId"}}`, encodeURIComponent(String(tagId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns the list of the Tags in a  specified Product, identified by the `productId` parameter.
         * @summary List Tags
         * @param {string} productId The identifier of the Product.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTags: async (productId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('getTags', 'productId', productId)
            const localVarPath = `/v1/products/{productId}/tags`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint updates a Tag identified by the `tagId` parameter.
         * @summary Update Tag
         * @param {number} tagId The identifier of the Tag.
         * @param {UpdateTagModel} updateTagModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTag: async (tagId: number, updateTagModel: UpdateTagModel, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tagId' is not null or undefined
            assertParamExists('updateTag', 'tagId', tagId)
            // verify required parameter 'updateTagModel' is not null or undefined
            assertParamExists('updateTag', 'updateTagModel', updateTagModel)
            const localVarPath = `/v1/tags/{tagId}`
                .replace(`{${"tagId"}}`, encodeURIComponent(String(tagId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateTagModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TagsApi - functional programming interface
 * @export
 */
export const TagsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TagsApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint creates a new Tag in a specified Product  identified by the `productId` parameter, which can be obtained from the [List Products](#operation/get-products) endpoint.
         * @summary Create Tag
         * @param {string} productId The identifier of the Organization.
         * @param {CreateTagModel} createTagModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTag(productId: string, createTagModel: CreateTagModel, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTag(productId, createTagModel, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TagsApi.createTag']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This endpoint deletes a Tag identified by the `tagId` parameter. To remove a Tag from a Feature Flag or Setting use the [Update Flag](#operation/update-setting) endpoint.
         * @summary Delete Tag
         * @param {number} tagId The identifier of the Tag.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTag(tagId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTag(tagId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TagsApi.deleteTag']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This endpoint returns the list of the Settings that  has the specified Tag, identified by the `tagId` parameter.
         * @summary List Settings by Tag
         * @param {number} tagId The identifier of the Tag.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSettingsByTag(tagId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SettingModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSettingsByTag(tagId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TagsApi.getSettingsByTag']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This endpoint returns the metadata of a Tag  identified by the `tagId`.
         * @summary Get Tag
         * @param {number} tagId The identifier of the Tag.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTag(tagId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTag(tagId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TagsApi.getTag']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This endpoint returns the list of the Tags in a  specified Product, identified by the `productId` parameter.
         * @summary List Tags
         * @param {string} productId The identifier of the Product.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTags(productId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TagModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTags(productId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TagsApi.getTags']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This endpoint updates a Tag identified by the `tagId` parameter.
         * @summary Update Tag
         * @param {number} tagId The identifier of the Tag.
         * @param {UpdateTagModel} updateTagModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTag(tagId: number, updateTagModel: UpdateTagModel, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTag(tagId, updateTagModel, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TagsApi.updateTag']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TagsApi - factory interface
 * @export
 */
export const TagsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TagsApiFp(configuration)
    return {
        /**
         * This endpoint creates a new Tag in a specified Product  identified by the `productId` parameter, which can be obtained from the [List Products](#operation/get-products) endpoint.
         * @summary Create Tag
         * @param {string} productId The identifier of the Organization.
         * @param {CreateTagModel} createTagModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTag(productId: string, createTagModel: CreateTagModel, options?: any): AxiosPromise<TagModel> {
            return localVarFp.createTag(productId, createTagModel, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint deletes a Tag identified by the `tagId` parameter. To remove a Tag from a Feature Flag or Setting use the [Update Flag](#operation/update-setting) endpoint.
         * @summary Delete Tag
         * @param {number} tagId The identifier of the Tag.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTag(tagId: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteTag(tagId, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns the list of the Settings that  has the specified Tag, identified by the `tagId` parameter.
         * @summary List Settings by Tag
         * @param {number} tagId The identifier of the Tag.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSettingsByTag(tagId: number, options?: any): AxiosPromise<Array<SettingModel>> {
            return localVarFp.getSettingsByTag(tagId, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns the metadata of a Tag  identified by the `tagId`.
         * @summary Get Tag
         * @param {number} tagId The identifier of the Tag.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTag(tagId: number, options?: any): AxiosPromise<TagModel> {
            return localVarFp.getTag(tagId, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns the list of the Tags in a  specified Product, identified by the `productId` parameter.
         * @summary List Tags
         * @param {string} productId The identifier of the Product.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTags(productId: string, options?: any): AxiosPromise<Array<TagModel>> {
            return localVarFp.getTags(productId, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint updates a Tag identified by the `tagId` parameter.
         * @summary Update Tag
         * @param {number} tagId The identifier of the Tag.
         * @param {UpdateTagModel} updateTagModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTag(tagId: number, updateTagModel: UpdateTagModel, options?: any): AxiosPromise<TagModel> {
            return localVarFp.updateTag(tagId, updateTagModel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TagsApi - object-oriented interface
 * @export
 * @class TagsApi
 * @extends {BaseAPI}
 */
export class TagsApi extends BaseAPI {
    /**
     * This endpoint creates a new Tag in a specified Product  identified by the `productId` parameter, which can be obtained from the [List Products](#operation/get-products) endpoint.
     * @summary Create Tag
     * @param {string} productId The identifier of the Organization.
     * @param {CreateTagModel} createTagModel 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApi
     */
    public createTag(productId: string, createTagModel: CreateTagModel, options?: RawAxiosRequestConfig) {
        return TagsApiFp(this.configuration).createTag(productId, createTagModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint deletes a Tag identified by the `tagId` parameter. To remove a Tag from a Feature Flag or Setting use the [Update Flag](#operation/update-setting) endpoint.
     * @summary Delete Tag
     * @param {number} tagId The identifier of the Tag.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApi
     */
    public deleteTag(tagId: number, options?: RawAxiosRequestConfig) {
        return TagsApiFp(this.configuration).deleteTag(tagId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint returns the list of the Settings that  has the specified Tag, identified by the `tagId` parameter.
     * @summary List Settings by Tag
     * @param {number} tagId The identifier of the Tag.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApi
     */
    public getSettingsByTag(tagId: number, options?: RawAxiosRequestConfig) {
        return TagsApiFp(this.configuration).getSettingsByTag(tagId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint returns the metadata of a Tag  identified by the `tagId`.
     * @summary Get Tag
     * @param {number} tagId The identifier of the Tag.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApi
     */
    public getTag(tagId: number, options?: RawAxiosRequestConfig) {
        return TagsApiFp(this.configuration).getTag(tagId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint returns the list of the Tags in a  specified Product, identified by the `productId` parameter.
     * @summary List Tags
     * @param {string} productId The identifier of the Product.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApi
     */
    public getTags(productId: string, options?: RawAxiosRequestConfig) {
        return TagsApiFp(this.configuration).getTags(productId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint updates a Tag identified by the `tagId` parameter.
     * @summary Update Tag
     * @param {number} tagId The identifier of the Tag.
     * @param {UpdateTagModel} updateTagModel 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApi
     */
    public updateTag(tagId: number, updateTagModel: UpdateTagModel, options?: RawAxiosRequestConfig) {
        return TagsApiFp(this.configuration).updateTag(tagId, updateTagModel, options).then((request) => request(this.axios, this.basePath));
    }
}

