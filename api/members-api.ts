/* tslint:disable */
/* eslint-disable */
/**
 * ConfigCat Public Management API
 * The purpose of this API is to access the ConfigCat platform programmatically. You can **Create**, **Read**, **Update** and **Delete** any entities like **Feature Flags, Configs, Environments** or **Products** within ConfigCat.  **Base API URL**: https://test-api.configcat.com  If you prefer the swagger documentation, you can find it here: [Swagger UI](https://test-api.configcat.com/swagger).  The API is based on HTTP REST, uses resource-oriented URLs, status codes and supports JSON  format. Do not use this API for accessing and evaluating feature flag values. Use the [SDKs instead](https://configcat.com/docs/sdk-reference/overview).   # OpenAPI Specification  The complete specification is publicly available in the following formats:  - [OpenAPI v3](https://test-api.configcat.com/docs/v1/swagger.json) - [Swagger v2](https://test-api.configcat.com/docs/v1/swagger.v2.json)  You can use it to generate client libraries in various languages with [OpenAPI Generator](https://github.com/OpenAPITools/openapi-generator) or [Swagger Codegen](https://swagger.io/tools/swagger-codegen/) to interact with this API.  # Authentication This API uses the [Basic HTTP Authentication Scheme](https://en.wikipedia.org/wiki/Basic_access_authentication).   <!-- ReDoc-Inject: <security-definitions> -->  # Throttling and rate limits All the rate limited API calls are returning information about the current rate limit period in the following HTTP headers:  | Header | Description | | :- | :- | | X-Rate-Limit-Remaining | The maximum number of requests remaining in the current rate limit period. | | X-Rate-Limit-Reset     | The time when the current rate limit period resets.        |  When the rate limit is exceeded by a request, the API returns with a `HTTP 429 - Too many requests` status along with a `Retry-After` HTTP header. 
 *
 * The version of the OpenAPI document: v1
 * Contact: support@configcat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { AddUserToGroupRequest } from '../model';
// @ts-ignore
import { InviteMembersRequest } from '../model';
// @ts-ignore
import { MemberModel } from '../model';
// @ts-ignore
import { OrganizationMembersModel } from '../model';
// @ts-ignore
import { UserModel } from '../model';
/**
 * MembersApi - axios parameter creator
 * @export
 */
export const MembersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint adds a Member identified by the `userId` to one or more Permission Groups.  This endpoint can also be used to move a Member between Permission Groups within a Product. Only a single Permission Group can be set per Product.
         * @summary Update Member Permissions
         * @param {string} organizationId The identifier of the Organization.
         * @param {string} userId The identifier of the Member.
         * @param {AddUserToGroupRequest} addUserToGroupRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMemberToGroup: async (organizationId: string, userId: string, addUserToGroupRequest: AddUserToGroupRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('addMemberToGroup', 'organizationId', organizationId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('addMemberToGroup', 'userId', userId)
            // verify required parameter 'addUserToGroupRequest' is not null or undefined
            assertParamExists('addMemberToGroup', 'addUserToGroupRequest', addUserToGroupRequest)
            const localVarPath = `/v1/organizations/{organizationId}/members/{userId}`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)))
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addUserToGroupRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint removes a Member identified by the `userId` from the  given Organization identified by the `organizationId` parameter.
         * @summary Delete Member from Organization
         * @param {string} organizationId The identifier of the Organization.
         * @param {string} userId The identifier of the Member.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrganizationMember: async (organizationId: string, userId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('deleteOrganizationMember', 'organizationId', organizationId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('deleteOrganizationMember', 'userId', userId)
            const localVarPath = `/v1/organizations/{organizationId}/members/{userId}`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)))
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint removes a Member identified by the `userId` from the  given Product identified by the `productId` parameter.
         * @summary Delete Member from Product
         * @param {string} productId The identifier of the Product.
         * @param {string} userId The identifier of the Member.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProductMember: async (productId: string, userId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('deleteProductMember', 'productId', productId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('deleteProductMember', 'userId', userId)
            const localVarPath = `/v1/products/{productId}/members/{userId}`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)))
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns the list of Members that belongs  to the given Organization, identified by the `organizationId` parameter.  The results may vary based on the access level of the user who calls the endpoint:  - When it\'s called with Organization Admin privileges, the result will contain each member in the Organization. - When it\'s called without Organization Admin privileges, the result will contain each Organization Admin along with members    of those products where the caller has `Team members and permission groups` (`canManageMembers`) permission.
         * @summary List Organization Members
         * @param {string} organizationId The identifier of the Organization.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getOrganizationMembers: async (organizationId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('getOrganizationMembers', 'organizationId', organizationId)
            const localVarPath = `/v1/organizations/{organizationId}/members`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns the list of Members that belongs  to the given Organization, identified by the `organizationId` parameter.  The results may vary based on the access level of the user who calls the endpoint:  - When it\'s called with Organization Admin privileges, the result will contain each member in the Organization. - When it\'s called without Organization Admin privileges, the result will contain each Organization Admin along with members    of those products where the caller has `Team members and permission groups` (`canManageMembers`) permission.
         * @summary List Organization Members
         * @param {string} organizationId The identifier of the Organization.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationMembersV2: async (organizationId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('getOrganizationMembersV2', 'organizationId', organizationId)
            const localVarPath = `/v2/organizations/{organizationId}/members`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns the list of Members that belongs  to the given Product, identified by the `productId` parameter.
         * @summary List Product Members
         * @param {string} productId The identifier of the Product.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductMembers: async (productId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('getProductMembers', 'productId', productId)
            const localVarPath = `/v1/products/{productId}/members`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint invites a Member into the given Product identified by the `productId` parameter.
         * @summary Invite Member
         * @param {string} productId The identifier of the Product.
         * @param {InviteMembersRequest} inviteMembersRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inviteMember: async (productId: string, inviteMembersRequest: InviteMembersRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('inviteMember', 'productId', productId)
            // verify required parameter 'inviteMembersRequest' is not null or undefined
            assertParamExists('inviteMember', 'inviteMembersRequest', inviteMembersRequest)
            const localVarPath = `/v1/products/{productId}/members/invite`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inviteMembersRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MembersApi - functional programming interface
 * @export
 */
export const MembersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MembersApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint adds a Member identified by the `userId` to one or more Permission Groups.  This endpoint can also be used to move a Member between Permission Groups within a Product. Only a single Permission Group can be set per Product.
         * @summary Update Member Permissions
         * @param {string} organizationId The identifier of the Organization.
         * @param {string} userId The identifier of the Member.
         * @param {AddUserToGroupRequest} addUserToGroupRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addMemberToGroup(organizationId: string, userId: string, addUserToGroupRequest: AddUserToGroupRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addMemberToGroup(organizationId, userId, addUserToGroupRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MembersApi.addMemberToGroup']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This endpoint removes a Member identified by the `userId` from the  given Organization identified by the `organizationId` parameter.
         * @summary Delete Member from Organization
         * @param {string} organizationId The identifier of the Organization.
         * @param {string} userId The identifier of the Member.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteOrganizationMember(organizationId: string, userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteOrganizationMember(organizationId, userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MembersApi.deleteOrganizationMember']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This endpoint removes a Member identified by the `userId` from the  given Product identified by the `productId` parameter.
         * @summary Delete Member from Product
         * @param {string} productId The identifier of the Product.
         * @param {string} userId The identifier of the Member.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProductMember(productId: string, userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteProductMember(productId, userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MembersApi.deleteProductMember']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This endpoint returns the list of Members that belongs  to the given Organization, identified by the `organizationId` parameter.  The results may vary based on the access level of the user who calls the endpoint:  - When it\'s called with Organization Admin privileges, the result will contain each member in the Organization. - When it\'s called without Organization Admin privileges, the result will contain each Organization Admin along with members    of those products where the caller has `Team members and permission groups` (`canManageMembers`) permission.
         * @summary List Organization Members
         * @param {string} organizationId The identifier of the Organization.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async getOrganizationMembers(organizationId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrganizationMembers(organizationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MembersApi.getOrganizationMembers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This endpoint returns the list of Members that belongs  to the given Organization, identified by the `organizationId` parameter.  The results may vary based on the access level of the user who calls the endpoint:  - When it\'s called with Organization Admin privileges, the result will contain each member in the Organization. - When it\'s called without Organization Admin privileges, the result will contain each Organization Admin along with members    of those products where the caller has `Team members and permission groups` (`canManageMembers`) permission.
         * @summary List Organization Members
         * @param {string} organizationId The identifier of the Organization.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrganizationMembersV2(organizationId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationMembersModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrganizationMembersV2(organizationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MembersApi.getOrganizationMembersV2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This endpoint returns the list of Members that belongs  to the given Product, identified by the `productId` parameter.
         * @summary List Product Members
         * @param {string} productId The identifier of the Product.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProductMembers(productId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MemberModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProductMembers(productId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MembersApi.getProductMembers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This endpoint invites a Member into the given Product identified by the `productId` parameter.
         * @summary Invite Member
         * @param {string} productId The identifier of the Product.
         * @param {InviteMembersRequest} inviteMembersRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inviteMember(productId: string, inviteMembersRequest: InviteMembersRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inviteMember(productId, inviteMembersRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MembersApi.inviteMember']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MembersApi - factory interface
 * @export
 */
export const MembersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MembersApiFp(configuration)
    return {
        /**
         * This endpoint adds a Member identified by the `userId` to one or more Permission Groups.  This endpoint can also be used to move a Member between Permission Groups within a Product. Only a single Permission Group can be set per Product.
         * @summary Update Member Permissions
         * @param {string} organizationId The identifier of the Organization.
         * @param {string} userId The identifier of the Member.
         * @param {AddUserToGroupRequest} addUserToGroupRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMemberToGroup(organizationId: string, userId: string, addUserToGroupRequest: AddUserToGroupRequest, options?: any): AxiosPromise<void> {
            return localVarFp.addMemberToGroup(organizationId, userId, addUserToGroupRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint removes a Member identified by the `userId` from the  given Organization identified by the `organizationId` parameter.
         * @summary Delete Member from Organization
         * @param {string} organizationId The identifier of the Organization.
         * @param {string} userId The identifier of the Member.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrganizationMember(organizationId: string, userId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteOrganizationMember(organizationId, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint removes a Member identified by the `userId` from the  given Product identified by the `productId` parameter.
         * @summary Delete Member from Product
         * @param {string} productId The identifier of the Product.
         * @param {string} userId The identifier of the Member.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProductMember(productId: string, userId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteProductMember(productId, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns the list of Members that belongs  to the given Organization, identified by the `organizationId` parameter.  The results may vary based on the access level of the user who calls the endpoint:  - When it\'s called with Organization Admin privileges, the result will contain each member in the Organization. - When it\'s called without Organization Admin privileges, the result will contain each Organization Admin along with members    of those products where the caller has `Team members and permission groups` (`canManageMembers`) permission.
         * @summary List Organization Members
         * @param {string} organizationId The identifier of the Organization.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getOrganizationMembers(organizationId: string, options?: any): AxiosPromise<Array<UserModel>> {
            return localVarFp.getOrganizationMembers(organizationId, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns the list of Members that belongs  to the given Organization, identified by the `organizationId` parameter.  The results may vary based on the access level of the user who calls the endpoint:  - When it\'s called with Organization Admin privileges, the result will contain each member in the Organization. - When it\'s called without Organization Admin privileges, the result will contain each Organization Admin along with members    of those products where the caller has `Team members and permission groups` (`canManageMembers`) permission.
         * @summary List Organization Members
         * @param {string} organizationId The identifier of the Organization.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationMembersV2(organizationId: string, options?: any): AxiosPromise<OrganizationMembersModel> {
            return localVarFp.getOrganizationMembersV2(organizationId, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns the list of Members that belongs  to the given Product, identified by the `productId` parameter.
         * @summary List Product Members
         * @param {string} productId The identifier of the Product.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductMembers(productId: string, options?: any): AxiosPromise<Array<MemberModel>> {
            return localVarFp.getProductMembers(productId, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint invites a Member into the given Product identified by the `productId` parameter.
         * @summary Invite Member
         * @param {string} productId The identifier of the Product.
         * @param {InviteMembersRequest} inviteMembersRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inviteMember(productId: string, inviteMembersRequest: InviteMembersRequest, options?: any): AxiosPromise<void> {
            return localVarFp.inviteMember(productId, inviteMembersRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MembersApi - object-oriented interface
 * @export
 * @class MembersApi
 * @extends {BaseAPI}
 */
export class MembersApi extends BaseAPI {
    /**
     * This endpoint adds a Member identified by the `userId` to one or more Permission Groups.  This endpoint can also be used to move a Member between Permission Groups within a Product. Only a single Permission Group can be set per Product.
     * @summary Update Member Permissions
     * @param {string} organizationId The identifier of the Organization.
     * @param {string} userId The identifier of the Member.
     * @param {AddUserToGroupRequest} addUserToGroupRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembersApi
     */
    public addMemberToGroup(organizationId: string, userId: string, addUserToGroupRequest: AddUserToGroupRequest, options?: RawAxiosRequestConfig) {
        return MembersApiFp(this.configuration).addMemberToGroup(organizationId, userId, addUserToGroupRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint removes a Member identified by the `userId` from the  given Organization identified by the `organizationId` parameter.
     * @summary Delete Member from Organization
     * @param {string} organizationId The identifier of the Organization.
     * @param {string} userId The identifier of the Member.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembersApi
     */
    public deleteOrganizationMember(organizationId: string, userId: string, options?: RawAxiosRequestConfig) {
        return MembersApiFp(this.configuration).deleteOrganizationMember(organizationId, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint removes a Member identified by the `userId` from the  given Product identified by the `productId` parameter.
     * @summary Delete Member from Product
     * @param {string} productId The identifier of the Product.
     * @param {string} userId The identifier of the Member.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembersApi
     */
    public deleteProductMember(productId: string, userId: string, options?: RawAxiosRequestConfig) {
        return MembersApiFp(this.configuration).deleteProductMember(productId, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint returns the list of Members that belongs  to the given Organization, identified by the `organizationId` parameter.  The results may vary based on the access level of the user who calls the endpoint:  - When it\'s called with Organization Admin privileges, the result will contain each member in the Organization. - When it\'s called without Organization Admin privileges, the result will contain each Organization Admin along with members    of those products where the caller has `Team members and permission groups` (`canManageMembers`) permission.
     * @summary List Organization Members
     * @param {string} organizationId The identifier of the Organization.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof MembersApi
     */
    public getOrganizationMembers(organizationId: string, options?: RawAxiosRequestConfig) {
        return MembersApiFp(this.configuration).getOrganizationMembers(organizationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint returns the list of Members that belongs  to the given Organization, identified by the `organizationId` parameter.  The results may vary based on the access level of the user who calls the endpoint:  - When it\'s called with Organization Admin privileges, the result will contain each member in the Organization. - When it\'s called without Organization Admin privileges, the result will contain each Organization Admin along with members    of those products where the caller has `Team members and permission groups` (`canManageMembers`) permission.
     * @summary List Organization Members
     * @param {string} organizationId The identifier of the Organization.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembersApi
     */
    public getOrganizationMembersV2(organizationId: string, options?: RawAxiosRequestConfig) {
        return MembersApiFp(this.configuration).getOrganizationMembersV2(organizationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint returns the list of Members that belongs  to the given Product, identified by the `productId` parameter.
     * @summary List Product Members
     * @param {string} productId The identifier of the Product.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembersApi
     */
    public getProductMembers(productId: string, options?: RawAxiosRequestConfig) {
        return MembersApiFp(this.configuration).getProductMembers(productId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint invites a Member into the given Product identified by the `productId` parameter.
     * @summary Invite Member
     * @param {string} productId The identifier of the Product.
     * @param {InviteMembersRequest} inviteMembersRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembersApi
     */
    public inviteMember(productId: string, inviteMembersRequest: InviteMembersRequest, options?: RawAxiosRequestConfig) {
        return MembersApiFp(this.configuration).inviteMember(productId, inviteMembersRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

