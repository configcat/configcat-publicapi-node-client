/* tslint:disable */
/* eslint-disable */
/**
 * ConfigCat Public Management API
 * The purpose of this API is to access the ConfigCat platform programmatically. You can **Create**, **Read**, **Update** and **Delete** any entities like **Feature Flags, Configs, Environments** or **Products** within ConfigCat.  **Base API URL**: https://api.configcat.com  If you prefer the swagger documentation, you can find it here: [Swagger UI](https://api.configcat.com/swagger).  The API is based on HTTP REST, uses resource-oriented URLs, status codes and supports JSON  format.   **Important:** Do not use this API for accessing and evaluating feature flag values. Use the [SDKs](https://configcat.com/docs/sdk-reference/overview) or the [ConfigCat Proxy](https://configcat.com/docs/advanced/proxy/proxy-overview/) instead.  # OpenAPI Specification  The complete specification is publicly available in the following formats:  - [OpenAPI v3](https://api.configcat.com/docs/v1/swagger.json) - [Swagger v2](https://api.configcat.com/docs/v1/swagger.v2.json)  You can use it to generate client libraries in various languages with [OpenAPI Generator](https://github.com/OpenAPITools/openapi-generator) or [Swagger Codegen](https://swagger.io/tools/swagger-codegen/) to interact with this API.  # Authentication This API uses the [Basic HTTP Authentication Scheme](https://en.wikipedia.org/wiki/Basic_access_authentication).   <!-- ReDoc-Inject: <security-definitions> -->  # Throttling and rate limits All the rate limited API calls are returning information about the current rate limit period in the following HTTP headers:  | Header | Description | | :- | :- | | X-Rate-Limit-Remaining | The maximum number of requests remaining in the current rate limit period. | | X-Rate-Limit-Reset     | The time when the current rate limit period resets.        |  When the rate limit is exceeded by a request, the API returns with a `HTTP 429 - Too many requests` status along with a `Retry-After` HTTP header. 
 *
 * The version of the OpenAPI document: v1
 * Contact: support@configcat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { JsonPatchOperation } from '../model';
// @ts-ignore
import { WebHookRequestModel } from '../model';
// @ts-ignore
import { WebhookResponseModel } from '../model';
// @ts-ignore
import { WebhookSigningKeysModel } from '../model';
/**
 * WebhooksApi - axios parameter creator
 * @export
 */
export const WebhooksApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint creates a new Webhook in a specified Product identified by the `productId` parameter, which can be obtained from the [List Products](#operation/get-products) endpoint.
         * @summary Create Webhook
         * @param {string} configId The identifier of the Config.
         * @param {string} environmentId The identifier of the Environment.
         * @param {WebHookRequestModel} webHookRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWebhook: async (configId: string, environmentId: string, webHookRequestModel: WebHookRequestModel, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'configId' is not null or undefined
            assertParamExists('createWebhook', 'configId', configId)
            // verify required parameter 'environmentId' is not null or undefined
            assertParamExists('createWebhook', 'environmentId', environmentId)
            // verify required parameter 'webHookRequestModel' is not null or undefined
            assertParamExists('createWebhook', 'webHookRequestModel', webHookRequestModel)
            const localVarPath = `/v1/configs/{configId}/environments/{environmentId}/webhooks`
                .replace(`{${"configId"}}`, encodeURIComponent(String(configId)))
                .replace(`{${"environmentId"}}`, encodeURIComponent(String(environmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(webHookRequestModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint removes a Webhook identified by the `webhookId` parameter.
         * @summary Delete Webhook
         * @param {number} webhookId The identifier of the Webhook.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWebhook: async (webhookId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webhookId' is not null or undefined
            assertParamExists('deleteWebhook', 'webhookId', webhookId)
            const localVarPath = `/v1/webhooks/{webhookId}`
                .replace(`{${"webhookId"}}`, encodeURIComponent(String(webhookId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns the metadata of a Webhook  identified by the `webhookId`.
         * @summary Get Webhook
         * @param {number} webhookId The identifier of the Webhook.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWebhook: async (webhookId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webhookId' is not null or undefined
            assertParamExists('getWebhook', 'webhookId', webhookId)
            const localVarPath = `/v1/webhooks/{webhookId}`
                .replace(`{${"webhookId"}}`, encodeURIComponent(String(webhookId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns the signing keys of a Webhook  identified by the `webhookId`.  Signing keys are used for ensuring the Webhook requests you receive are actually sent by ConfigCat.  <a href=\"https://configcat.com/docs/advanced/notifications-webhooks/#verifying-webhook-requests\" target=\"_blank\" rel=\"noopener noreferrer\">Here</a> you can read more about Webhook request verification.
         * @summary Get Webhook Signing Keys
         * @param {number} webhookId The identifier of the Webhook.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWebhookSigningKeys: async (webhookId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webhookId' is not null or undefined
            assertParamExists('getWebhookSigningKeys', 'webhookId', webhookId)
            const localVarPath = `/v1/webhooks/{webhookId}/keys`
                .replace(`{${"webhookId"}}`, encodeURIComponent(String(webhookId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns the list of the Webhooks that belongs to the given Product identified by the `productId` parameter, which can be obtained from the [List Products](#operation/get-products) endpoint.
         * @summary List Webhooks
         * @param {string} productId The identifier of the Product.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWebhooks: async (productId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('getWebhooks', 'productId', productId)
            const localVarPath = `/v1/products/{productId}/webhooks`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint replaces the whole value of a Webhook identified by the `webhookId` parameter.  **Important:** As this endpoint is doing a complete replace, it\'s important to set every other attribute that you don\'t want to change in its original state. Not listing one means it will reset.
         * @summary Replace Webhook
         * @param {number} webhookId The identifier of the Webhook.
         * @param {WebHookRequestModel} webHookRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceWebhook: async (webhookId: number, webHookRequestModel: WebHookRequestModel, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webhookId' is not null or undefined
            assertParamExists('replaceWebhook', 'webhookId', webhookId)
            // verify required parameter 'webHookRequestModel' is not null or undefined
            assertParamExists('replaceWebhook', 'webHookRequestModel', webHookRequestModel)
            const localVarPath = `/v1/webhooks/{webhookId}`
                .replace(`{${"webhookId"}}`, encodeURIComponent(String(webhookId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(webHookRequestModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint updates a Webhook identified by the `webhookId` parameter with a collection of [JSON Patch](https://jsonpatch.com) operations.  The advantage of using JSON Patch is that you can describe individual update operations on a resource without touching attributes that you don\'t want to change.  For example: We have the following resource. ```json {   \"webhookId\": 6,   \"url\": \"https://example.com/hook\",   \"httpMethod\": \"post\",   \"content\": \"null\",   \"webHookHeaders\": [] } ``` If we send an update request body as below (it changes the `content` field and adds a new HTTP header): ```json [   {     \"op\": \"replace\",      \"path\": \"/content\",      \"value\": \"Some webhook content.\"   },    {     \"op\": \"add\",      \"path\": \"/webHookHeaders/-\",      \"value\": {       \"key\": \"X-Custom-Header\",        \"value\": \"Custom header value\"     }   } ] ``` Only the `content` and `webHookHeaders` are updated and all the other attributes remain unchanged. So we get a response like this: ```json {   \"webhookId\": 6,   \"url\": \"https://example.com/hook\",   \"httpMethod\": \"post\",    \"content\": \"Some webhook content.\",    \"webHookHeaders\": [     {       \"key\": \"X-Custom-Header\",        \"value\": \"Custom header value\",        \"isSecure\": false     }   ] } ```
         * @summary Update Webhook
         * @param {number} webhookId The identifier of the Webhook.
         * @param {Array<JsonPatchOperation>} jsonPatchOperation 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWebhook: async (webhookId: number, jsonPatchOperation: Array<JsonPatchOperation>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webhookId' is not null or undefined
            assertParamExists('updateWebhook', 'webhookId', webhookId)
            // verify required parameter 'jsonPatchOperation' is not null or undefined
            assertParamExists('updateWebhook', 'jsonPatchOperation', jsonPatchOperation)
            const localVarPath = `/v1/webhooks/{webhookId}`
                .replace(`{${"webhookId"}}`, encodeURIComponent(String(webhookId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(jsonPatchOperation, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WebhooksApi - functional programming interface
 * @export
 */
export const WebhooksApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WebhooksApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint creates a new Webhook in a specified Product identified by the `productId` parameter, which can be obtained from the [List Products](#operation/get-products) endpoint.
         * @summary Create Webhook
         * @param {string} configId The identifier of the Config.
         * @param {string} environmentId The identifier of the Environment.
         * @param {WebHookRequestModel} webHookRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createWebhook(configId: string, environmentId: string, webHookRequestModel: WebHookRequestModel, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebhookResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createWebhook(configId, environmentId, webHookRequestModel, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WebhooksApi.createWebhook']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This endpoint removes a Webhook identified by the `webhookId` parameter.
         * @summary Delete Webhook
         * @param {number} webhookId The identifier of the Webhook.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteWebhook(webhookId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteWebhook(webhookId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WebhooksApi.deleteWebhook']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This endpoint returns the metadata of a Webhook  identified by the `webhookId`.
         * @summary Get Webhook
         * @param {number} webhookId The identifier of the Webhook.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWebhook(webhookId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebhookResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWebhook(webhookId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WebhooksApi.getWebhook']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This endpoint returns the signing keys of a Webhook  identified by the `webhookId`.  Signing keys are used for ensuring the Webhook requests you receive are actually sent by ConfigCat.  <a href=\"https://configcat.com/docs/advanced/notifications-webhooks/#verifying-webhook-requests\" target=\"_blank\" rel=\"noopener noreferrer\">Here</a> you can read more about Webhook request verification.
         * @summary Get Webhook Signing Keys
         * @param {number} webhookId The identifier of the Webhook.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWebhookSigningKeys(webhookId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebhookSigningKeysModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWebhookSigningKeys(webhookId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WebhooksApi.getWebhookSigningKeys']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This endpoint returns the list of the Webhooks that belongs to the given Product identified by the `productId` parameter, which can be obtained from the [List Products](#operation/get-products) endpoint.
         * @summary List Webhooks
         * @param {string} productId The identifier of the Product.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWebhooks(productId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WebhookResponseModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWebhooks(productId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WebhooksApi.getWebhooks']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This endpoint replaces the whole value of a Webhook identified by the `webhookId` parameter.  **Important:** As this endpoint is doing a complete replace, it\'s important to set every other attribute that you don\'t want to change in its original state. Not listing one means it will reset.
         * @summary Replace Webhook
         * @param {number} webhookId The identifier of the Webhook.
         * @param {WebHookRequestModel} webHookRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async replaceWebhook(webhookId: number, webHookRequestModel: WebHookRequestModel, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebhookResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.replaceWebhook(webhookId, webHookRequestModel, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WebhooksApi.replaceWebhook']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This endpoint updates a Webhook identified by the `webhookId` parameter with a collection of [JSON Patch](https://jsonpatch.com) operations.  The advantage of using JSON Patch is that you can describe individual update operations on a resource without touching attributes that you don\'t want to change.  For example: We have the following resource. ```json {   \"webhookId\": 6,   \"url\": \"https://example.com/hook\",   \"httpMethod\": \"post\",   \"content\": \"null\",   \"webHookHeaders\": [] } ``` If we send an update request body as below (it changes the `content` field and adds a new HTTP header): ```json [   {     \"op\": \"replace\",      \"path\": \"/content\",      \"value\": \"Some webhook content.\"   },    {     \"op\": \"add\",      \"path\": \"/webHookHeaders/-\",      \"value\": {       \"key\": \"X-Custom-Header\",        \"value\": \"Custom header value\"     }   } ] ``` Only the `content` and `webHookHeaders` are updated and all the other attributes remain unchanged. So we get a response like this: ```json {   \"webhookId\": 6,   \"url\": \"https://example.com/hook\",   \"httpMethod\": \"post\",    \"content\": \"Some webhook content.\",    \"webHookHeaders\": [     {       \"key\": \"X-Custom-Header\",        \"value\": \"Custom header value\",        \"isSecure\": false     }   ] } ```
         * @summary Update Webhook
         * @param {number} webhookId The identifier of the Webhook.
         * @param {Array<JsonPatchOperation>} jsonPatchOperation 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateWebhook(webhookId: number, jsonPatchOperation: Array<JsonPatchOperation>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebhookResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateWebhook(webhookId, jsonPatchOperation, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WebhooksApi.updateWebhook']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * WebhooksApi - factory interface
 * @export
 */
export const WebhooksApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WebhooksApiFp(configuration)
    return {
        /**
         * This endpoint creates a new Webhook in a specified Product identified by the `productId` parameter, which can be obtained from the [List Products](#operation/get-products) endpoint.
         * @summary Create Webhook
         * @param {string} configId The identifier of the Config.
         * @param {string} environmentId The identifier of the Environment.
         * @param {WebHookRequestModel} webHookRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWebhook(configId: string, environmentId: string, webHookRequestModel: WebHookRequestModel, options?: any): AxiosPromise<WebhookResponseModel> {
            return localVarFp.createWebhook(configId, environmentId, webHookRequestModel, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint removes a Webhook identified by the `webhookId` parameter.
         * @summary Delete Webhook
         * @param {number} webhookId The identifier of the Webhook.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWebhook(webhookId: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteWebhook(webhookId, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns the metadata of a Webhook  identified by the `webhookId`.
         * @summary Get Webhook
         * @param {number} webhookId The identifier of the Webhook.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWebhook(webhookId: number, options?: any): AxiosPromise<WebhookResponseModel> {
            return localVarFp.getWebhook(webhookId, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns the signing keys of a Webhook  identified by the `webhookId`.  Signing keys are used for ensuring the Webhook requests you receive are actually sent by ConfigCat.  <a href=\"https://configcat.com/docs/advanced/notifications-webhooks/#verifying-webhook-requests\" target=\"_blank\" rel=\"noopener noreferrer\">Here</a> you can read more about Webhook request verification.
         * @summary Get Webhook Signing Keys
         * @param {number} webhookId The identifier of the Webhook.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWebhookSigningKeys(webhookId: number, options?: any): AxiosPromise<WebhookSigningKeysModel> {
            return localVarFp.getWebhookSigningKeys(webhookId, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns the list of the Webhooks that belongs to the given Product identified by the `productId` parameter, which can be obtained from the [List Products](#operation/get-products) endpoint.
         * @summary List Webhooks
         * @param {string} productId The identifier of the Product.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWebhooks(productId: string, options?: any): AxiosPromise<Array<WebhookResponseModel>> {
            return localVarFp.getWebhooks(productId, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint replaces the whole value of a Webhook identified by the `webhookId` parameter.  **Important:** As this endpoint is doing a complete replace, it\'s important to set every other attribute that you don\'t want to change in its original state. Not listing one means it will reset.
         * @summary Replace Webhook
         * @param {number} webhookId The identifier of the Webhook.
         * @param {WebHookRequestModel} webHookRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceWebhook(webhookId: number, webHookRequestModel: WebHookRequestModel, options?: any): AxiosPromise<WebhookResponseModel> {
            return localVarFp.replaceWebhook(webhookId, webHookRequestModel, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint updates a Webhook identified by the `webhookId` parameter with a collection of [JSON Patch](https://jsonpatch.com) operations.  The advantage of using JSON Patch is that you can describe individual update operations on a resource without touching attributes that you don\'t want to change.  For example: We have the following resource. ```json {   \"webhookId\": 6,   \"url\": \"https://example.com/hook\",   \"httpMethod\": \"post\",   \"content\": \"null\",   \"webHookHeaders\": [] } ``` If we send an update request body as below (it changes the `content` field and adds a new HTTP header): ```json [   {     \"op\": \"replace\",      \"path\": \"/content\",      \"value\": \"Some webhook content.\"   },    {     \"op\": \"add\",      \"path\": \"/webHookHeaders/-\",      \"value\": {       \"key\": \"X-Custom-Header\",        \"value\": \"Custom header value\"     }   } ] ``` Only the `content` and `webHookHeaders` are updated and all the other attributes remain unchanged. So we get a response like this: ```json {   \"webhookId\": 6,   \"url\": \"https://example.com/hook\",   \"httpMethod\": \"post\",    \"content\": \"Some webhook content.\",    \"webHookHeaders\": [     {       \"key\": \"X-Custom-Header\",        \"value\": \"Custom header value\",        \"isSecure\": false     }   ] } ```
         * @summary Update Webhook
         * @param {number} webhookId The identifier of the Webhook.
         * @param {Array<JsonPatchOperation>} jsonPatchOperation 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWebhook(webhookId: number, jsonPatchOperation: Array<JsonPatchOperation>, options?: any): AxiosPromise<WebhookResponseModel> {
            return localVarFp.updateWebhook(webhookId, jsonPatchOperation, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WebhooksApi - object-oriented interface
 * @export
 * @class WebhooksApi
 * @extends {BaseAPI}
 */
export class WebhooksApi extends BaseAPI {
    /**
     * This endpoint creates a new Webhook in a specified Product identified by the `productId` parameter, which can be obtained from the [List Products](#operation/get-products) endpoint.
     * @summary Create Webhook
     * @param {string} configId The identifier of the Config.
     * @param {string} environmentId The identifier of the Environment.
     * @param {WebHookRequestModel} webHookRequestModel 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    public createWebhook(configId: string, environmentId: string, webHookRequestModel: WebHookRequestModel, options?: RawAxiosRequestConfig) {
        return WebhooksApiFp(this.configuration).createWebhook(configId, environmentId, webHookRequestModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint removes a Webhook identified by the `webhookId` parameter.
     * @summary Delete Webhook
     * @param {number} webhookId The identifier of the Webhook.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    public deleteWebhook(webhookId: number, options?: RawAxiosRequestConfig) {
        return WebhooksApiFp(this.configuration).deleteWebhook(webhookId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint returns the metadata of a Webhook  identified by the `webhookId`.
     * @summary Get Webhook
     * @param {number} webhookId The identifier of the Webhook.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    public getWebhook(webhookId: number, options?: RawAxiosRequestConfig) {
        return WebhooksApiFp(this.configuration).getWebhook(webhookId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint returns the signing keys of a Webhook  identified by the `webhookId`.  Signing keys are used for ensuring the Webhook requests you receive are actually sent by ConfigCat.  <a href=\"https://configcat.com/docs/advanced/notifications-webhooks/#verifying-webhook-requests\" target=\"_blank\" rel=\"noopener noreferrer\">Here</a> you can read more about Webhook request verification.
     * @summary Get Webhook Signing Keys
     * @param {number} webhookId The identifier of the Webhook.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    public getWebhookSigningKeys(webhookId: number, options?: RawAxiosRequestConfig) {
        return WebhooksApiFp(this.configuration).getWebhookSigningKeys(webhookId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint returns the list of the Webhooks that belongs to the given Product identified by the `productId` parameter, which can be obtained from the [List Products](#operation/get-products) endpoint.
     * @summary List Webhooks
     * @param {string} productId The identifier of the Product.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    public getWebhooks(productId: string, options?: RawAxiosRequestConfig) {
        return WebhooksApiFp(this.configuration).getWebhooks(productId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint replaces the whole value of a Webhook identified by the `webhookId` parameter.  **Important:** As this endpoint is doing a complete replace, it\'s important to set every other attribute that you don\'t want to change in its original state. Not listing one means it will reset.
     * @summary Replace Webhook
     * @param {number} webhookId The identifier of the Webhook.
     * @param {WebHookRequestModel} webHookRequestModel 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    public replaceWebhook(webhookId: number, webHookRequestModel: WebHookRequestModel, options?: RawAxiosRequestConfig) {
        return WebhooksApiFp(this.configuration).replaceWebhook(webhookId, webHookRequestModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint updates a Webhook identified by the `webhookId` parameter with a collection of [JSON Patch](https://jsonpatch.com) operations.  The advantage of using JSON Patch is that you can describe individual update operations on a resource without touching attributes that you don\'t want to change.  For example: We have the following resource. ```json {   \"webhookId\": 6,   \"url\": \"https://example.com/hook\",   \"httpMethod\": \"post\",   \"content\": \"null\",   \"webHookHeaders\": [] } ``` If we send an update request body as below (it changes the `content` field and adds a new HTTP header): ```json [   {     \"op\": \"replace\",      \"path\": \"/content\",      \"value\": \"Some webhook content.\"   },    {     \"op\": \"add\",      \"path\": \"/webHookHeaders/-\",      \"value\": {       \"key\": \"X-Custom-Header\",        \"value\": \"Custom header value\"     }   } ] ``` Only the `content` and `webHookHeaders` are updated and all the other attributes remain unchanged. So we get a response like this: ```json {   \"webhookId\": 6,   \"url\": \"https://example.com/hook\",   \"httpMethod\": \"post\",    \"content\": \"Some webhook content.\",    \"webHookHeaders\": [     {       \"key\": \"X-Custom-Header\",        \"value\": \"Custom header value\",        \"isSecure\": false     }   ] } ```
     * @summary Update Webhook
     * @param {number} webhookId The identifier of the Webhook.
     * @param {Array<JsonPatchOperation>} jsonPatchOperation 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    public updateWebhook(webhookId: number, jsonPatchOperation: Array<JsonPatchOperation>, options?: RawAxiosRequestConfig) {
        return WebhooksApiFp(this.configuration).updateWebhook(webhookId, jsonPatchOperation, options).then((request) => request(this.axios, this.basePath));
    }
}

