/* tslint:disable */
/* eslint-disable */
/**
 * ConfigCat Public Management API
 * The purpose of this API is to access the ConfigCat platform programmatically. You can **Create**, **Read**, **Update** and **Delete** any entities like **Feature Flags, Configs, Environments** or **Products** within ConfigCat.  **Base API URL**: https://test-api.configcat.com  If you prefer the swagger documentation, you can find it here: [Swagger UI](https://test-api.configcat.com/swagger).  The API is based on HTTP REST, uses resource-oriented URLs, status codes and supports JSON  format. Do not use this API for accessing and evaluating feature flag values. Use the [SDKs instead](https://configcat.com/docs/sdk-reference/overview).   # OpenAPI Specification  The complete specification is publicly available in the following formats:  - [OpenAPI v3](https://test-api.configcat.com/docs/v1/swagger.json) - [Swagger v2](https://test-api.configcat.com/docs/v1/swagger.v2.json)  You can use it to generate client libraries in various languages with [OpenAPI Generator](https://github.com/OpenAPITools/openapi-generator) or [Swagger Codegen](https://swagger.io/tools/swagger-codegen/) to interact with this API.  # Authentication This API uses the [Basic HTTP Authentication Scheme](https://en.wikipedia.org/wiki/Basic_access_authentication).   <!-- ReDoc-Inject: <security-definitions> -->  # Throttling and rate limits All the rate limited API calls are returning information about the current rate limit period in the following HTTP headers:  | Header | Description | | :- | :- | | X-Rate-Limit-Remaining | The maximum number of requests remaining in the current rate limit period. | | X-Rate-Limit-Reset     | The time when the current rate limit period resets.        |  When the rate limit is exceeded by a request, the API returns with a `HTTP 429 - Too many requests` status along with a `Retry-After` HTTP header. 
 *
 * The version of the OpenAPI document: v1
 * Contact: support@configcat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { CreateSegmentModel } from '../model';
// @ts-ignore
import { SegmentListModel } from '../model';
// @ts-ignore
import { SegmentModel } from '../model';
// @ts-ignore
import { UpdateSegmentModel } from '../model';
/**
 * SegmentsApi - axios parameter creator
 * @export
 */
export const SegmentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint creates a new Segment in a specified Product  identified by the `productId` parameter, which can be obtained from the [List Products](#operation/get-products) endpoint.
         * @summary Create Segment
         * @param {string} productId The identifier of the Product.
         * @param {CreateSegmentModel} createSegmentModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSegment: async (productId: string, createSegmentModel: CreateSegmentModel, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('createSegment', 'productId', productId)
            // verify required parameter 'createSegmentModel' is not null or undefined
            assertParamExists('createSegment', 'createSegmentModel', createSegmentModel)
            const localVarPath = `/v1/products/{productId}/segments`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createSegmentModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint removes a Segment identified by the `segmentId` parameter.
         * @summary Delete Segment
         * @param {string} segmentId The identifier of the Segment.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSegment: async (segmentId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'segmentId' is not null or undefined
            assertParamExists('deleteSegment', 'segmentId', segmentId)
            const localVarPath = `/v1/segments/{segmentId}`
                .replace(`{${"segmentId"}}`, encodeURIComponent(String(segmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns the metadata of a Segment identified by the `segmentId`.
         * @summary Get Segment
         * @param {string} segmentId The identifier of the Segment.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSegment: async (segmentId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'segmentId' is not null or undefined
            assertParamExists('getSegment', 'segmentId', segmentId)
            const localVarPath = `/v1/segments/{segmentId}`
                .replace(`{${"segmentId"}}`, encodeURIComponent(String(segmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns the list of the Segments that belongs to the given Product identified by the `productId` parameter, which can be obtained from the [List Products](#operation/get-products) endpoint.
         * @summary List Segments
         * @param {string} productId The identifier of the Product.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSegments: async (productId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('getSegments', 'productId', productId)
            const localVarPath = `/v1/products/{productId}/segments`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint updates a Segment identified by the `segmentId` parameter.
         * @summary Update Segment
         * @param {string} segmentId The identifier of the Segment.
         * @param {UpdateSegmentModel} updateSegmentModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSegment: async (segmentId: string, updateSegmentModel: UpdateSegmentModel, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'segmentId' is not null or undefined
            assertParamExists('updateSegment', 'segmentId', segmentId)
            // verify required parameter 'updateSegmentModel' is not null or undefined
            assertParamExists('updateSegment', 'updateSegmentModel', updateSegmentModel)
            const localVarPath = `/v1/segments/{segmentId}`
                .replace(`{${"segmentId"}}`, encodeURIComponent(String(segmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateSegmentModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SegmentsApi - functional programming interface
 * @export
 */
export const SegmentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SegmentsApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint creates a new Segment in a specified Product  identified by the `productId` parameter, which can be obtained from the [List Products](#operation/get-products) endpoint.
         * @summary Create Segment
         * @param {string} productId The identifier of the Product.
         * @param {CreateSegmentModel} createSegmentModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSegment(productId: string, createSegmentModel: CreateSegmentModel, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SegmentModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSegment(productId, createSegmentModel, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SegmentsApi.createSegment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This endpoint removes a Segment identified by the `segmentId` parameter.
         * @summary Delete Segment
         * @param {string} segmentId The identifier of the Segment.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSegment(segmentId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSegment(segmentId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SegmentsApi.deleteSegment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This endpoint returns the metadata of a Segment identified by the `segmentId`.
         * @summary Get Segment
         * @param {string} segmentId The identifier of the Segment.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSegment(segmentId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SegmentModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSegment(segmentId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SegmentsApi.getSegment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This endpoint returns the list of the Segments that belongs to the given Product identified by the `productId` parameter, which can be obtained from the [List Products](#operation/get-products) endpoint.
         * @summary List Segments
         * @param {string} productId The identifier of the Product.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSegments(productId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SegmentListModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSegments(productId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SegmentsApi.getSegments']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This endpoint updates a Segment identified by the `segmentId` parameter.
         * @summary Update Segment
         * @param {string} segmentId The identifier of the Segment.
         * @param {UpdateSegmentModel} updateSegmentModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSegment(segmentId: string, updateSegmentModel: UpdateSegmentModel, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SegmentModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSegment(segmentId, updateSegmentModel, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SegmentsApi.updateSegment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SegmentsApi - factory interface
 * @export
 */
export const SegmentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SegmentsApiFp(configuration)
    return {
        /**
         * This endpoint creates a new Segment in a specified Product  identified by the `productId` parameter, which can be obtained from the [List Products](#operation/get-products) endpoint.
         * @summary Create Segment
         * @param {string} productId The identifier of the Product.
         * @param {CreateSegmentModel} createSegmentModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSegment(productId: string, createSegmentModel: CreateSegmentModel, options?: any): AxiosPromise<SegmentModel> {
            return localVarFp.createSegment(productId, createSegmentModel, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint removes a Segment identified by the `segmentId` parameter.
         * @summary Delete Segment
         * @param {string} segmentId The identifier of the Segment.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSegment(segmentId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteSegment(segmentId, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns the metadata of a Segment identified by the `segmentId`.
         * @summary Get Segment
         * @param {string} segmentId The identifier of the Segment.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSegment(segmentId: string, options?: any): AxiosPromise<SegmentModel> {
            return localVarFp.getSegment(segmentId, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns the list of the Segments that belongs to the given Product identified by the `productId` parameter, which can be obtained from the [List Products](#operation/get-products) endpoint.
         * @summary List Segments
         * @param {string} productId The identifier of the Product.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSegments(productId: string, options?: any): AxiosPromise<Array<SegmentListModel>> {
            return localVarFp.getSegments(productId, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint updates a Segment identified by the `segmentId` parameter.
         * @summary Update Segment
         * @param {string} segmentId The identifier of the Segment.
         * @param {UpdateSegmentModel} updateSegmentModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSegment(segmentId: string, updateSegmentModel: UpdateSegmentModel, options?: any): AxiosPromise<SegmentModel> {
            return localVarFp.updateSegment(segmentId, updateSegmentModel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SegmentsApi - object-oriented interface
 * @export
 * @class SegmentsApi
 * @extends {BaseAPI}
 */
export class SegmentsApi extends BaseAPI {
    /**
     * This endpoint creates a new Segment in a specified Product  identified by the `productId` parameter, which can be obtained from the [List Products](#operation/get-products) endpoint.
     * @summary Create Segment
     * @param {string} productId The identifier of the Product.
     * @param {CreateSegmentModel} createSegmentModel 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SegmentsApi
     */
    public createSegment(productId: string, createSegmentModel: CreateSegmentModel, options?: RawAxiosRequestConfig) {
        return SegmentsApiFp(this.configuration).createSegment(productId, createSegmentModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint removes a Segment identified by the `segmentId` parameter.
     * @summary Delete Segment
     * @param {string} segmentId The identifier of the Segment.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SegmentsApi
     */
    public deleteSegment(segmentId: string, options?: RawAxiosRequestConfig) {
        return SegmentsApiFp(this.configuration).deleteSegment(segmentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint returns the metadata of a Segment identified by the `segmentId`.
     * @summary Get Segment
     * @param {string} segmentId The identifier of the Segment.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SegmentsApi
     */
    public getSegment(segmentId: string, options?: RawAxiosRequestConfig) {
        return SegmentsApiFp(this.configuration).getSegment(segmentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint returns the list of the Segments that belongs to the given Product identified by the `productId` parameter, which can be obtained from the [List Products](#operation/get-products) endpoint.
     * @summary List Segments
     * @param {string} productId The identifier of the Product.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SegmentsApi
     */
    public getSegments(productId: string, options?: RawAxiosRequestConfig) {
        return SegmentsApiFp(this.configuration).getSegments(productId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint updates a Segment identified by the `segmentId` parameter.
     * @summary Update Segment
     * @param {string} segmentId The identifier of the Segment.
     * @param {UpdateSegmentModel} updateSegmentModel 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SegmentsApi
     */
    public updateSegment(segmentId: string, updateSegmentModel: UpdateSegmentModel, options?: RawAxiosRequestConfig) {
        return SegmentsApiFp(this.configuration).updateSegment(segmentId, updateSegmentModel, options).then((request) => request(this.axios, this.basePath));
    }
}

