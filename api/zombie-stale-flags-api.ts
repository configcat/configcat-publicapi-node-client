/* tslint:disable */
/* eslint-disable */
/**
 * ConfigCat Public Management API
 * The purpose of this API is to access the ConfigCat platform programmatically. You can **Create**, **Read**, **Update** and **Delete** any entities like **Feature Flags, Configs, Environments** or **Products** within ConfigCat.  **Base API URL**: https://api.configcat.com  If you prefer the swagger documentation, you can find it here: [Swagger UI](https://api.configcat.com/swagger).  The API is based on HTTP REST, uses resource-oriented URLs, status codes and supports JSON  format.   **Important:** Do not use this API for accessing and evaluating feature flag values. Use the [SDKs](https://configcat.com/docs/sdk-reference/overview) or the [ConfigCat Proxy](https://configcat.com/docs/advanced/proxy/proxy-overview/) instead.  # OpenAPI Specification  The complete specification is publicly available in the following formats:  - [OpenAPI v3](https://api.configcat.com/docs/v1/swagger.json) - [Swagger v2](https://api.configcat.com/docs/v1/swagger.v2.json)  You can use it to generate client libraries in various languages with [OpenAPI Generator](https://github.com/OpenAPITools/openapi-generator) or [Swagger Codegen](https://swagger.io/tools/swagger-codegen/) to interact with this API.  # Authentication This API uses the [Basic HTTP Authentication Scheme](https://en.wikipedia.org/wiki/Basic_access_authentication).   <!-- ReDoc-Inject: <security-definitions> -->  # Throttling and rate limits All the rate limited API calls are returning information about the current rate limit period in the following HTTP headers:  | Header | Description | | :- | :- | | X-Rate-Limit-Remaining | The maximum number of requests remaining in the current rate limit period. | | X-Rate-Limit-Reset     | The time when the current rate limit period resets.        |  When the rate limit is exceeded by a request, the API returns with a `HTTP 429 - Too many requests` status along with a `Retry-After` HTTP header. 
 *
 * The version of the OpenAPI document: v1
 * Contact: support@configcat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { StaleFlagProductModel } from '../model';
// @ts-ignore
import { StaleFlagReminderScope } from '../model';
// @ts-ignore
import { StaleFlagStaleInEnvironmentsType } from '../model';
/**
 * ZombieStaleFlagsApi - axios parameter creator
 * @export
 */
export const ZombieStaleFlagsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint returns the list of Zombie (stale) flags for a given Product  and the result can be optionally filtered by various parameters.
         * @summary List Zombie (stale) flags for Product
         * @param {string} productId The identifier of the Product.
         * @param {StaleFlagReminderScope} [scope] The scope of the report.
         * @param {number} [staleFlagAgeDays] The inactivity in days after a feature flag should be considered stale.
         * @param {StaleFlagStaleInEnvironmentsType} [staleFlagStaleInEnvironmentsType] Consider a feature flag as stale if the feature flag is stale in all/any of the environments.
         * @param {Array<string>} [ignoredEnvironmentIds] Ignore environment identifiers from the report.
         * @param {Array<number>} [ignoredTagIds] Ignore feature flags from the report based on their tag identifiers.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStaleflags: async (productId: string, scope?: StaleFlagReminderScope, staleFlagAgeDays?: number, staleFlagStaleInEnvironmentsType?: StaleFlagStaleInEnvironmentsType, ignoredEnvironmentIds?: Array<string>, ignoredTagIds?: Array<number>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('getStaleflags', 'productId', productId)
            const localVarPath = `/v1/products/{productId}/staleflags`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (scope !== undefined) {
                localVarQueryParameter['scope'] = scope;
            }

            if (staleFlagAgeDays !== undefined) {
                localVarQueryParameter['staleFlagAgeDays'] = staleFlagAgeDays;
            }

            if (staleFlagStaleInEnvironmentsType !== undefined) {
                localVarQueryParameter['staleFlagStaleInEnvironmentsType'] = staleFlagStaleInEnvironmentsType;
            }

            if (ignoredEnvironmentIds) {
                localVarQueryParameter['ignoredEnvironmentIds'] = ignoredEnvironmentIds;
            }

            if (ignoredTagIds) {
                localVarQueryParameter['ignoredTagIds'] = ignoredTagIds;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ZombieStaleFlagsApi - functional programming interface
 * @export
 */
export const ZombieStaleFlagsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ZombieStaleFlagsApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint returns the list of Zombie (stale) flags for a given Product  and the result can be optionally filtered by various parameters.
         * @summary List Zombie (stale) flags for Product
         * @param {string} productId The identifier of the Product.
         * @param {StaleFlagReminderScope} [scope] The scope of the report.
         * @param {number} [staleFlagAgeDays] The inactivity in days after a feature flag should be considered stale.
         * @param {StaleFlagStaleInEnvironmentsType} [staleFlagStaleInEnvironmentsType] Consider a feature flag as stale if the feature flag is stale in all/any of the environments.
         * @param {Array<string>} [ignoredEnvironmentIds] Ignore environment identifiers from the report.
         * @param {Array<number>} [ignoredTagIds] Ignore feature flags from the report based on their tag identifiers.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStaleflags(productId: string, scope?: StaleFlagReminderScope, staleFlagAgeDays?: number, staleFlagStaleInEnvironmentsType?: StaleFlagStaleInEnvironmentsType, ignoredEnvironmentIds?: Array<string>, ignoredTagIds?: Array<number>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StaleFlagProductModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStaleflags(productId, scope, staleFlagAgeDays, staleFlagStaleInEnvironmentsType, ignoredEnvironmentIds, ignoredTagIds, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ZombieStaleFlagsApi.getStaleflags']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ZombieStaleFlagsApi - factory interface
 * @export
 */
export const ZombieStaleFlagsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ZombieStaleFlagsApiFp(configuration)
    return {
        /**
         * This endpoint returns the list of Zombie (stale) flags for a given Product  and the result can be optionally filtered by various parameters.
         * @summary List Zombie (stale) flags for Product
         * @param {string} productId The identifier of the Product.
         * @param {StaleFlagReminderScope} [scope] The scope of the report.
         * @param {number} [staleFlagAgeDays] The inactivity in days after a feature flag should be considered stale.
         * @param {StaleFlagStaleInEnvironmentsType} [staleFlagStaleInEnvironmentsType] Consider a feature flag as stale if the feature flag is stale in all/any of the environments.
         * @param {Array<string>} [ignoredEnvironmentIds] Ignore environment identifiers from the report.
         * @param {Array<number>} [ignoredTagIds] Ignore feature flags from the report based on their tag identifiers.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStaleflags(productId: string, scope?: StaleFlagReminderScope, staleFlagAgeDays?: number, staleFlagStaleInEnvironmentsType?: StaleFlagStaleInEnvironmentsType, ignoredEnvironmentIds?: Array<string>, ignoredTagIds?: Array<number>, options?: any): AxiosPromise<StaleFlagProductModel> {
            return localVarFp.getStaleflags(productId, scope, staleFlagAgeDays, staleFlagStaleInEnvironmentsType, ignoredEnvironmentIds, ignoredTagIds, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ZombieStaleFlagsApi - object-oriented interface
 * @export
 * @class ZombieStaleFlagsApi
 * @extends {BaseAPI}
 */
export class ZombieStaleFlagsApi extends BaseAPI {
    /**
     * This endpoint returns the list of Zombie (stale) flags for a given Product  and the result can be optionally filtered by various parameters.
     * @summary List Zombie (stale) flags for Product
     * @param {string} productId The identifier of the Product.
     * @param {StaleFlagReminderScope} [scope] The scope of the report.
     * @param {number} [staleFlagAgeDays] The inactivity in days after a feature flag should be considered stale.
     * @param {StaleFlagStaleInEnvironmentsType} [staleFlagStaleInEnvironmentsType] Consider a feature flag as stale if the feature flag is stale in all/any of the environments.
     * @param {Array<string>} [ignoredEnvironmentIds] Ignore environment identifiers from the report.
     * @param {Array<number>} [ignoredTagIds] Ignore feature flags from the report based on their tag identifiers.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZombieStaleFlagsApi
     */
    public getStaleflags(productId: string, scope?: StaleFlagReminderScope, staleFlagAgeDays?: number, staleFlagStaleInEnvironmentsType?: StaleFlagStaleInEnvironmentsType, ignoredEnvironmentIds?: Array<string>, ignoredTagIds?: Array<number>, options?: RawAxiosRequestConfig) {
        return ZombieStaleFlagsApiFp(this.configuration).getStaleflags(productId, scope, staleFlagAgeDays, staleFlagStaleInEnvironmentsType, ignoredEnvironmentIds, ignoredTagIds, options).then((request) => request(this.axios, this.basePath));
    }
}

