/* tslint:disable */
/* eslint-disable */
/**
 * ConfigCat Public Management API
 * The purpose of this API is to access the ConfigCat platform programmatically. You can **Create**, **Read**, **Update** and **Delete** any entities like **Feature Flags, Configs, Environments** or **Products** within ConfigCat.  **Base API URL**: https://api.configcat.com  If you prefer the swagger documentation, you can find it here: [Swagger UI](https://api.configcat.com/swagger).  The API is based on HTTP REST, uses resource-oriented URLs, status codes and supports JSON  format.   **Important:** Do not use this API for accessing and evaluating feature flag values. Use the [SDKs](https://configcat.com/docs/sdk-reference/overview) or the [ConfigCat Proxy](https://configcat.com/docs/advanced/proxy/proxy-overview/) instead.  # OpenAPI Specification  The complete specification is publicly available in the following formats:  - [OpenAPI v3](https://api.configcat.com/docs/v1/swagger.json) - [Swagger v2](https://api.configcat.com/docs/v1/swagger.v2.json)  You can use it to generate client libraries in various languages with [OpenAPI Generator](https://github.com/OpenAPITools/openapi-generator) or [Swagger Codegen](https://swagger.io/tools/swagger-codegen/) to interact with this API.  # Authentication This API uses the [Basic HTTP Authentication Scheme](https://en.wikipedia.org/wiki/Basic_access_authentication).   <!-- ReDoc-Inject: <security-definitions> -->  # Throttling and rate limits All the rate limited API calls are returning information about the current rate limit period in the following HTTP headers:  | Header | Description | | :- | :- | | X-Rate-Limit-Remaining | The maximum number of requests remaining in the current rate limit period. | | X-Rate-Limit-Reset     | The time when the current rate limit period resets.        |  When the rate limit is exceeded by a request, the API returns with a `HTTP 429 - Too many requests` status along with a `Retry-After` HTTP header. 
 *
 * The version of the OpenAPI document: v1
 * Contact: support@configcat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { ConfigSettingFormulasModel } from '../model';
// @ts-ignore
import { JsonPatchOperation } from '../model';
// @ts-ignore
import { SettingFormulaModel } from '../model';
// @ts-ignore
import { UpdateEvaluationFormulaModel } from '../model';
// @ts-ignore
import { UpdateEvaluationFormulasModel } from '../model';
/**
 * FeatureFlagSettingValuesV2Api - axios parameter creator
 * @export
 */
export const FeatureFlagSettingValuesV2ApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint returns the value of a Feature Flag or Setting in a specified Environment identified by the `environmentId` parameter.  The most important fields in the response are the `defaultValue`, `targetingRules`, and `percentageEvaluationAttribute`. The `defaultValue` represents what the clients will get when the evaluation requests of our SDKs are not matching to any of the defined Targeting Rules, or when there are no additional rules to evaluate.  The `targetingRules` represents the current Targeting Rule configuration of the actual Feature Flag or Setting in an **ordered** collection, which means the order of the returned rules is matching to the evaluation order. You can read more about these rules [here](https://configcat.com/docs/targeting/targeting-overview/).  The `percentageEvaluationAttribute` represents the custom [User Object](https://configcat.com/docs/targeting/user-object/) attribute that must be used for [percentage evaluation](https://configcat.com/docs/targeting/percentage-options/) of the Feature Flag or Setting.
         * @summary Get value
         * @param {string} environmentId The identifier of the Environment.
         * @param {number} settingId The id of the Setting.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSettingValueV2: async (environmentId: string, settingId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'environmentId' is not null or undefined
            assertParamExists('getSettingValueV2', 'environmentId', environmentId)
            // verify required parameter 'settingId' is not null or undefined
            assertParamExists('getSettingValueV2', 'settingId', settingId)
            const localVarPath = `/v2/environments/{environmentId}/settings/{settingId}/value`
                .replace(`{${"environmentId"}}`, encodeURIComponent(String(environmentId)))
                .replace(`{${"settingId"}}`, encodeURIComponent(String(settingId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns all Feature Flag and Setting values of a Config identified by the `configId` parameter in a specified Environment identified by the `environmentId` parameter.  The most important fields in the response are the `defaultValue`, `targetingRules`. The `defaultValue` represents what the clients will get when the evaluation requests of our SDKs are not matching to any of the defined Targeting Rules, or when there are no additional rules to evaluate.  The `targetingRules` represents the current Targeting Rule configuration of the actual Feature Flag or Setting in an **ordered** collection, which means the order of the returned rules is matching to the evaluation order. You can read more about these rules [here](https://configcat.com/docs/targeting/targeting-overview/).  The `percentageEvaluationAttribute` represents the custom [User Object](https://configcat.com/docs/targeting/user-object/) attribute that must be used for [percentage evaluation](https://configcat.com/docs/targeting/percentage-options/) of the Feature Flag or Setting.
         * @summary Get values
         * @param {string} configId The identifier of the Config.
         * @param {string} environmentId The identifier of the Environment.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSettingValuesV2: async (configId: string, environmentId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'configId' is not null or undefined
            assertParamExists('getSettingValuesV2', 'configId', configId)
            // verify required parameter 'environmentId' is not null or undefined
            assertParamExists('getSettingValuesV2', 'environmentId', environmentId)
            const localVarPath = `/v2/configs/{configId}/environments/{environmentId}/values`
                .replace(`{${"configId"}}`, encodeURIComponent(String(configId)))
                .replace(`{${"environmentId"}}`, encodeURIComponent(String(environmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint batch updates the Feature Flags and Settings of a Config identified by the `configId` parameter in a specified Environment identified by the `environmentId` parameter.  Only those Feature Flags and Settings are updated which are part of the request, all the others are left untouched.  **Important:** As this endpoint is doing a complete replace on those Feature Flags and Settings, which are set in the request.  It\'s important to set every other field that you don\'t want to change in its original state. Not listing a field means that it will reset.  For example: We have the following resource of a Feature Flag. ```json {   \"settingFormulas\": [     {       \"defaultValue\": {         \"boolValue\": false       },       \"targetingRules\": [         {           \"conditions\": [             {               \"userCondition\": {                 \"comparisonAttribute\": \"Email\",                 \"comparator\": \"sensitiveTextEquals\",                 \"comparisonValue\": {                   \"stringValue\": \"test@example.com\"                 }               }             }           ],           \"percentageOptions\": [],           \"value\": {             \"boolValue\": true           }         }       ],       \"settingId\": 1     }   ] } ``` If we send a batch replace request body as below: ```json {    \"updateFormulas\": [     {       \"defaultValue\": {         \"boolValue\": false       },       \"settingId\": 1     }   ] } ``` Then besides that the default value is set to `true`, all Targeting Rules of the related Feature Flag are deleted. So we get a response like this: ```json {   \"settingFormulas\": [     {       \"defaultValue\": {         \"boolValue\": false       },       \"targetingRules\": [],       \"setting\":        {         \"settingId\": 1       }     }   ] } ```
         * @summary Post values
         * @param {string} configId The identifier of the Config.
         * @param {string} environmentId The identifier of the Environment.
         * @param {UpdateEvaluationFormulasModel} updateEvaluationFormulasModel 
         * @param {string} [reason] The reason note for the Audit Log if the Product\&#39;s \&quot;Config changes require a reason\&quot; preference is turned on.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSettingValuesV2: async (configId: string, environmentId: string, updateEvaluationFormulasModel: UpdateEvaluationFormulasModel, reason?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'configId' is not null or undefined
            assertParamExists('postSettingValuesV2', 'configId', configId)
            // verify required parameter 'environmentId' is not null or undefined
            assertParamExists('postSettingValuesV2', 'environmentId', environmentId)
            // verify required parameter 'updateEvaluationFormulasModel' is not null or undefined
            assertParamExists('postSettingValuesV2', 'updateEvaluationFormulasModel', updateEvaluationFormulasModel)
            const localVarPath = `/v2/configs/{configId}/environments/{environmentId}/values`
                .replace(`{${"configId"}}`, encodeURIComponent(String(configId)))
                .replace(`{${"environmentId"}}`, encodeURIComponent(String(environmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (reason !== undefined) {
                localVarQueryParameter['reason'] = reason;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateEvaluationFormulasModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint replaces the value and the Targeting Rules of a Feature Flag or Setting in a specified Environment identified by the <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://app.configcat.com/sdkkey\">SDK key</a> passed in the `X-CONFIGCAT-SDKKEY` header.  Only the `defaultValue`, `targetingRules`, and `percentageEvaluationAttribute` fields are modifiable by this endpoint.  **Important:** As this endpoint is doing a complete replace, it\'s important to set every other field that you don\'t want to change to its original state. Not listing one means it will reset.  For example: We have the following resource of a Feature Flag. ```json {   \"defaultValue\": {     \"boolValue\": false   },   \"targetingRules\": [     {       \"conditions\": [         {           \"userCondition\": {             \"comparisonAttribute\": \"Email\",             \"comparator\": \"sensitiveTextEquals\",             \"comparisonValue\": {               \"stringValue\": \"test@example.com\"             }           }         }       ],       \"percentageOptions\": [],       \"value\": {         \"boolValue\": true       }     }   ] } ``` If we send a replace request body as below: ```json {   \"defaultValue\": {     \"boolValue\": true   } } ``` Then besides that the default served value is set to `true`, all the Targeting Rules are deleted. So we get a response like this: ```json {   \"defaultValue\": {     \"boolValue\": true   },   \"targetingRules\": [] } ```
         * @summary Replace value
         * @param {string} environmentId The identifier of the Environment.
         * @param {number} settingId The id of the Setting.
         * @param {UpdateEvaluationFormulaModel} updateEvaluationFormulaModel 
         * @param {string} [reason] The reason note for the Audit Log if the Product\&#39;s \&quot;Config changes require a reason\&quot; preference is turned on.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceSettingValueV2: async (environmentId: string, settingId: number, updateEvaluationFormulaModel: UpdateEvaluationFormulaModel, reason?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'environmentId' is not null or undefined
            assertParamExists('replaceSettingValueV2', 'environmentId', environmentId)
            // verify required parameter 'settingId' is not null or undefined
            assertParamExists('replaceSettingValueV2', 'settingId', settingId)
            // verify required parameter 'updateEvaluationFormulaModel' is not null or undefined
            assertParamExists('replaceSettingValueV2', 'updateEvaluationFormulaModel', updateEvaluationFormulaModel)
            const localVarPath = `/v2/environments/{environmentId}/settings/{settingId}/value`
                .replace(`{${"environmentId"}}`, encodeURIComponent(String(environmentId)))
                .replace(`{${"settingId"}}`, encodeURIComponent(String(settingId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (reason !== undefined) {
                localVarQueryParameter['reason'] = reason;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateEvaluationFormulaModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint updates the value of a Feature Flag or Setting with a collection of [JSON Patch](https://jsonpatch.com) operations in a specified Environment.  Only the `defaultValue`, `targetingRules`, and `percentageEvaluationAttribute` fields are modifiable by this endpoint.  The advantage of using JSON Patch is that you can describe individual update operations on a resource without touching attributes that you don\'t want to change. It supports collection reordering, so it also can be used for reordering the targeting rules of a Feature Flag or Setting.  For example: We have the following resource of a Feature Flag. ```json {   \"defaultValue\": {     \"boolValue\": false   },   \"targetingRules\": [     {       \"conditions\": [         {           \"userCondition\": {             \"comparisonAttribute\": \"Email\",             \"comparator\": \"sensitiveTextEquals\",             \"comparisonValue\": {               \"stringValue\": \"test@example.com\"             }           }         }       ],       \"percentageOptions\": [],       \"value\": {         \"boolValue\": true       }     }   ] } ``` If we send an update request body as below: ```json [   {     \"op\": \"replace\",     \"path\": \"/targetingRules/0/value/boolValue\",     \"value\": true   } ] ``` Only the first Targeting Rule\'s `value` is going to be set to `false` and all the other fields are remaining unchanged.  So we get a response like this: ```json {   \"defaultValue\": {     \"boolValue\": false   },   \"targetingRules\": [     {       \"conditions\": [         {           \"userCondition\": {             \"comparisonAttribute\": \"Email\",             \"comparator\": \"sensitiveTextEquals\",             \"comparisonValue\": {               \"stringValue\": \"test@example.com\"             }           }         }       ],       \"percentageOptions\": [],       \"value\": {         \"boolValue\": false       }     }   ] } ```
         * @summary Update value
         * @param {string} environmentId The identifier of the Environment.
         * @param {number} settingId The id of the Setting.
         * @param {Array<JsonPatchOperation>} jsonPatchOperation 
         * @param {string} [reason] The reason note for the Audit Log if the Product\&#39;s \&quot;Config changes require a reason\&quot; preference is turned on.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSettingValueV2: async (environmentId: string, settingId: number, jsonPatchOperation: Array<JsonPatchOperation>, reason?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'environmentId' is not null or undefined
            assertParamExists('updateSettingValueV2', 'environmentId', environmentId)
            // verify required parameter 'settingId' is not null or undefined
            assertParamExists('updateSettingValueV2', 'settingId', settingId)
            // verify required parameter 'jsonPatchOperation' is not null or undefined
            assertParamExists('updateSettingValueV2', 'jsonPatchOperation', jsonPatchOperation)
            const localVarPath = `/v2/environments/{environmentId}/settings/{settingId}/value`
                .replace(`{${"environmentId"}}`, encodeURIComponent(String(environmentId)))
                .replace(`{${"settingId"}}`, encodeURIComponent(String(settingId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (reason !== undefined) {
                localVarQueryParameter['reason'] = reason;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(jsonPatchOperation, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FeatureFlagSettingValuesV2Api - functional programming interface
 * @export
 */
export const FeatureFlagSettingValuesV2ApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FeatureFlagSettingValuesV2ApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint returns the value of a Feature Flag or Setting in a specified Environment identified by the `environmentId` parameter.  The most important fields in the response are the `defaultValue`, `targetingRules`, and `percentageEvaluationAttribute`. The `defaultValue` represents what the clients will get when the evaluation requests of our SDKs are not matching to any of the defined Targeting Rules, or when there are no additional rules to evaluate.  The `targetingRules` represents the current Targeting Rule configuration of the actual Feature Flag or Setting in an **ordered** collection, which means the order of the returned rules is matching to the evaluation order. You can read more about these rules [here](https://configcat.com/docs/targeting/targeting-overview/).  The `percentageEvaluationAttribute` represents the custom [User Object](https://configcat.com/docs/targeting/user-object/) attribute that must be used for [percentage evaluation](https://configcat.com/docs/targeting/percentage-options/) of the Feature Flag or Setting.
         * @summary Get value
         * @param {string} environmentId The identifier of the Environment.
         * @param {number} settingId The id of the Setting.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSettingValueV2(environmentId: string, settingId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SettingFormulaModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSettingValueV2(environmentId, settingId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FeatureFlagSettingValuesV2Api.getSettingValueV2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This endpoint returns all Feature Flag and Setting values of a Config identified by the `configId` parameter in a specified Environment identified by the `environmentId` parameter.  The most important fields in the response are the `defaultValue`, `targetingRules`. The `defaultValue` represents what the clients will get when the evaluation requests of our SDKs are not matching to any of the defined Targeting Rules, or when there are no additional rules to evaluate.  The `targetingRules` represents the current Targeting Rule configuration of the actual Feature Flag or Setting in an **ordered** collection, which means the order of the returned rules is matching to the evaluation order. You can read more about these rules [here](https://configcat.com/docs/targeting/targeting-overview/).  The `percentageEvaluationAttribute` represents the custom [User Object](https://configcat.com/docs/targeting/user-object/) attribute that must be used for [percentage evaluation](https://configcat.com/docs/targeting/percentage-options/) of the Feature Flag or Setting.
         * @summary Get values
         * @param {string} configId The identifier of the Config.
         * @param {string} environmentId The identifier of the Environment.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSettingValuesV2(configId: string, environmentId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConfigSettingFormulasModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSettingValuesV2(configId, environmentId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FeatureFlagSettingValuesV2Api.getSettingValuesV2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This endpoint batch updates the Feature Flags and Settings of a Config identified by the `configId` parameter in a specified Environment identified by the `environmentId` parameter.  Only those Feature Flags and Settings are updated which are part of the request, all the others are left untouched.  **Important:** As this endpoint is doing a complete replace on those Feature Flags and Settings, which are set in the request.  It\'s important to set every other field that you don\'t want to change in its original state. Not listing a field means that it will reset.  For example: We have the following resource of a Feature Flag. ```json {   \"settingFormulas\": [     {       \"defaultValue\": {         \"boolValue\": false       },       \"targetingRules\": [         {           \"conditions\": [             {               \"userCondition\": {                 \"comparisonAttribute\": \"Email\",                 \"comparator\": \"sensitiveTextEquals\",                 \"comparisonValue\": {                   \"stringValue\": \"test@example.com\"                 }               }             }           ],           \"percentageOptions\": [],           \"value\": {             \"boolValue\": true           }         }       ],       \"settingId\": 1     }   ] } ``` If we send a batch replace request body as below: ```json {    \"updateFormulas\": [     {       \"defaultValue\": {         \"boolValue\": false       },       \"settingId\": 1     }   ] } ``` Then besides that the default value is set to `true`, all Targeting Rules of the related Feature Flag are deleted. So we get a response like this: ```json {   \"settingFormulas\": [     {       \"defaultValue\": {         \"boolValue\": false       },       \"targetingRules\": [],       \"setting\":        {         \"settingId\": 1       }     }   ] } ```
         * @summary Post values
         * @param {string} configId The identifier of the Config.
         * @param {string} environmentId The identifier of the Environment.
         * @param {UpdateEvaluationFormulasModel} updateEvaluationFormulasModel 
         * @param {string} [reason] The reason note for the Audit Log if the Product\&#39;s \&quot;Config changes require a reason\&quot; preference is turned on.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postSettingValuesV2(configId: string, environmentId: string, updateEvaluationFormulasModel: UpdateEvaluationFormulasModel, reason?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConfigSettingFormulasModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postSettingValuesV2(configId, environmentId, updateEvaluationFormulasModel, reason, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FeatureFlagSettingValuesV2Api.postSettingValuesV2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This endpoint replaces the value and the Targeting Rules of a Feature Flag or Setting in a specified Environment identified by the <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://app.configcat.com/sdkkey\">SDK key</a> passed in the `X-CONFIGCAT-SDKKEY` header.  Only the `defaultValue`, `targetingRules`, and `percentageEvaluationAttribute` fields are modifiable by this endpoint.  **Important:** As this endpoint is doing a complete replace, it\'s important to set every other field that you don\'t want to change to its original state. Not listing one means it will reset.  For example: We have the following resource of a Feature Flag. ```json {   \"defaultValue\": {     \"boolValue\": false   },   \"targetingRules\": [     {       \"conditions\": [         {           \"userCondition\": {             \"comparisonAttribute\": \"Email\",             \"comparator\": \"sensitiveTextEquals\",             \"comparisonValue\": {               \"stringValue\": \"test@example.com\"             }           }         }       ],       \"percentageOptions\": [],       \"value\": {         \"boolValue\": true       }     }   ] } ``` If we send a replace request body as below: ```json {   \"defaultValue\": {     \"boolValue\": true   } } ``` Then besides that the default served value is set to `true`, all the Targeting Rules are deleted. So we get a response like this: ```json {   \"defaultValue\": {     \"boolValue\": true   },   \"targetingRules\": [] } ```
         * @summary Replace value
         * @param {string} environmentId The identifier of the Environment.
         * @param {number} settingId The id of the Setting.
         * @param {UpdateEvaluationFormulaModel} updateEvaluationFormulaModel 
         * @param {string} [reason] The reason note for the Audit Log if the Product\&#39;s \&quot;Config changes require a reason\&quot; preference is turned on.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async replaceSettingValueV2(environmentId: string, settingId: number, updateEvaluationFormulaModel: UpdateEvaluationFormulaModel, reason?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SettingFormulaModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.replaceSettingValueV2(environmentId, settingId, updateEvaluationFormulaModel, reason, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FeatureFlagSettingValuesV2Api.replaceSettingValueV2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This endpoint updates the value of a Feature Flag or Setting with a collection of [JSON Patch](https://jsonpatch.com) operations in a specified Environment.  Only the `defaultValue`, `targetingRules`, and `percentageEvaluationAttribute` fields are modifiable by this endpoint.  The advantage of using JSON Patch is that you can describe individual update operations on a resource without touching attributes that you don\'t want to change. It supports collection reordering, so it also can be used for reordering the targeting rules of a Feature Flag or Setting.  For example: We have the following resource of a Feature Flag. ```json {   \"defaultValue\": {     \"boolValue\": false   },   \"targetingRules\": [     {       \"conditions\": [         {           \"userCondition\": {             \"comparisonAttribute\": \"Email\",             \"comparator\": \"sensitiveTextEquals\",             \"comparisonValue\": {               \"stringValue\": \"test@example.com\"             }           }         }       ],       \"percentageOptions\": [],       \"value\": {         \"boolValue\": true       }     }   ] } ``` If we send an update request body as below: ```json [   {     \"op\": \"replace\",     \"path\": \"/targetingRules/0/value/boolValue\",     \"value\": true   } ] ``` Only the first Targeting Rule\'s `value` is going to be set to `false` and all the other fields are remaining unchanged.  So we get a response like this: ```json {   \"defaultValue\": {     \"boolValue\": false   },   \"targetingRules\": [     {       \"conditions\": [         {           \"userCondition\": {             \"comparisonAttribute\": \"Email\",             \"comparator\": \"sensitiveTextEquals\",             \"comparisonValue\": {               \"stringValue\": \"test@example.com\"             }           }         }       ],       \"percentageOptions\": [],       \"value\": {         \"boolValue\": false       }     }   ] } ```
         * @summary Update value
         * @param {string} environmentId The identifier of the Environment.
         * @param {number} settingId The id of the Setting.
         * @param {Array<JsonPatchOperation>} jsonPatchOperation 
         * @param {string} [reason] The reason note for the Audit Log if the Product\&#39;s \&quot;Config changes require a reason\&quot; preference is turned on.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSettingValueV2(environmentId: string, settingId: number, jsonPatchOperation: Array<JsonPatchOperation>, reason?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SettingFormulaModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSettingValueV2(environmentId, settingId, jsonPatchOperation, reason, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FeatureFlagSettingValuesV2Api.updateSettingValueV2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * FeatureFlagSettingValuesV2Api - factory interface
 * @export
 */
export const FeatureFlagSettingValuesV2ApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FeatureFlagSettingValuesV2ApiFp(configuration)
    return {
        /**
         * This endpoint returns the value of a Feature Flag or Setting in a specified Environment identified by the `environmentId` parameter.  The most important fields in the response are the `defaultValue`, `targetingRules`, and `percentageEvaluationAttribute`. The `defaultValue` represents what the clients will get when the evaluation requests of our SDKs are not matching to any of the defined Targeting Rules, or when there are no additional rules to evaluate.  The `targetingRules` represents the current Targeting Rule configuration of the actual Feature Flag or Setting in an **ordered** collection, which means the order of the returned rules is matching to the evaluation order. You can read more about these rules [here](https://configcat.com/docs/targeting/targeting-overview/).  The `percentageEvaluationAttribute` represents the custom [User Object](https://configcat.com/docs/targeting/user-object/) attribute that must be used for [percentage evaluation](https://configcat.com/docs/targeting/percentage-options/) of the Feature Flag or Setting.
         * @summary Get value
         * @param {string} environmentId The identifier of the Environment.
         * @param {number} settingId The id of the Setting.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSettingValueV2(environmentId: string, settingId: number, options?: any): AxiosPromise<SettingFormulaModel> {
            return localVarFp.getSettingValueV2(environmentId, settingId, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns all Feature Flag and Setting values of a Config identified by the `configId` parameter in a specified Environment identified by the `environmentId` parameter.  The most important fields in the response are the `defaultValue`, `targetingRules`. The `defaultValue` represents what the clients will get when the evaluation requests of our SDKs are not matching to any of the defined Targeting Rules, or when there are no additional rules to evaluate.  The `targetingRules` represents the current Targeting Rule configuration of the actual Feature Flag or Setting in an **ordered** collection, which means the order of the returned rules is matching to the evaluation order. You can read more about these rules [here](https://configcat.com/docs/targeting/targeting-overview/).  The `percentageEvaluationAttribute` represents the custom [User Object](https://configcat.com/docs/targeting/user-object/) attribute that must be used for [percentage evaluation](https://configcat.com/docs/targeting/percentage-options/) of the Feature Flag or Setting.
         * @summary Get values
         * @param {string} configId The identifier of the Config.
         * @param {string} environmentId The identifier of the Environment.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSettingValuesV2(configId: string, environmentId: string, options?: any): AxiosPromise<ConfigSettingFormulasModel> {
            return localVarFp.getSettingValuesV2(configId, environmentId, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint batch updates the Feature Flags and Settings of a Config identified by the `configId` parameter in a specified Environment identified by the `environmentId` parameter.  Only those Feature Flags and Settings are updated which are part of the request, all the others are left untouched.  **Important:** As this endpoint is doing a complete replace on those Feature Flags and Settings, which are set in the request.  It\'s important to set every other field that you don\'t want to change in its original state. Not listing a field means that it will reset.  For example: We have the following resource of a Feature Flag. ```json {   \"settingFormulas\": [     {       \"defaultValue\": {         \"boolValue\": false       },       \"targetingRules\": [         {           \"conditions\": [             {               \"userCondition\": {                 \"comparisonAttribute\": \"Email\",                 \"comparator\": \"sensitiveTextEquals\",                 \"comparisonValue\": {                   \"stringValue\": \"test@example.com\"                 }               }             }           ],           \"percentageOptions\": [],           \"value\": {             \"boolValue\": true           }         }       ],       \"settingId\": 1     }   ] } ``` If we send a batch replace request body as below: ```json {    \"updateFormulas\": [     {       \"defaultValue\": {         \"boolValue\": false       },       \"settingId\": 1     }   ] } ``` Then besides that the default value is set to `true`, all Targeting Rules of the related Feature Flag are deleted. So we get a response like this: ```json {   \"settingFormulas\": [     {       \"defaultValue\": {         \"boolValue\": false       },       \"targetingRules\": [],       \"setting\":        {         \"settingId\": 1       }     }   ] } ```
         * @summary Post values
         * @param {string} configId The identifier of the Config.
         * @param {string} environmentId The identifier of the Environment.
         * @param {UpdateEvaluationFormulasModel} updateEvaluationFormulasModel 
         * @param {string} [reason] The reason note for the Audit Log if the Product\&#39;s \&quot;Config changes require a reason\&quot; preference is turned on.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSettingValuesV2(configId: string, environmentId: string, updateEvaluationFormulasModel: UpdateEvaluationFormulasModel, reason?: string, options?: any): AxiosPromise<ConfigSettingFormulasModel> {
            return localVarFp.postSettingValuesV2(configId, environmentId, updateEvaluationFormulasModel, reason, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint replaces the value and the Targeting Rules of a Feature Flag or Setting in a specified Environment identified by the <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://app.configcat.com/sdkkey\">SDK key</a> passed in the `X-CONFIGCAT-SDKKEY` header.  Only the `defaultValue`, `targetingRules`, and `percentageEvaluationAttribute` fields are modifiable by this endpoint.  **Important:** As this endpoint is doing a complete replace, it\'s important to set every other field that you don\'t want to change to its original state. Not listing one means it will reset.  For example: We have the following resource of a Feature Flag. ```json {   \"defaultValue\": {     \"boolValue\": false   },   \"targetingRules\": [     {       \"conditions\": [         {           \"userCondition\": {             \"comparisonAttribute\": \"Email\",             \"comparator\": \"sensitiveTextEquals\",             \"comparisonValue\": {               \"stringValue\": \"test@example.com\"             }           }         }       ],       \"percentageOptions\": [],       \"value\": {         \"boolValue\": true       }     }   ] } ``` If we send a replace request body as below: ```json {   \"defaultValue\": {     \"boolValue\": true   } } ``` Then besides that the default served value is set to `true`, all the Targeting Rules are deleted. So we get a response like this: ```json {   \"defaultValue\": {     \"boolValue\": true   },   \"targetingRules\": [] } ```
         * @summary Replace value
         * @param {string} environmentId The identifier of the Environment.
         * @param {number} settingId The id of the Setting.
         * @param {UpdateEvaluationFormulaModel} updateEvaluationFormulaModel 
         * @param {string} [reason] The reason note for the Audit Log if the Product\&#39;s \&quot;Config changes require a reason\&quot; preference is turned on.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceSettingValueV2(environmentId: string, settingId: number, updateEvaluationFormulaModel: UpdateEvaluationFormulaModel, reason?: string, options?: any): AxiosPromise<SettingFormulaModel> {
            return localVarFp.replaceSettingValueV2(environmentId, settingId, updateEvaluationFormulaModel, reason, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint updates the value of a Feature Flag or Setting with a collection of [JSON Patch](https://jsonpatch.com) operations in a specified Environment.  Only the `defaultValue`, `targetingRules`, and `percentageEvaluationAttribute` fields are modifiable by this endpoint.  The advantage of using JSON Patch is that you can describe individual update operations on a resource without touching attributes that you don\'t want to change. It supports collection reordering, so it also can be used for reordering the targeting rules of a Feature Flag or Setting.  For example: We have the following resource of a Feature Flag. ```json {   \"defaultValue\": {     \"boolValue\": false   },   \"targetingRules\": [     {       \"conditions\": [         {           \"userCondition\": {             \"comparisonAttribute\": \"Email\",             \"comparator\": \"sensitiveTextEquals\",             \"comparisonValue\": {               \"stringValue\": \"test@example.com\"             }           }         }       ],       \"percentageOptions\": [],       \"value\": {         \"boolValue\": true       }     }   ] } ``` If we send an update request body as below: ```json [   {     \"op\": \"replace\",     \"path\": \"/targetingRules/0/value/boolValue\",     \"value\": true   } ] ``` Only the first Targeting Rule\'s `value` is going to be set to `false` and all the other fields are remaining unchanged.  So we get a response like this: ```json {   \"defaultValue\": {     \"boolValue\": false   },   \"targetingRules\": [     {       \"conditions\": [         {           \"userCondition\": {             \"comparisonAttribute\": \"Email\",             \"comparator\": \"sensitiveTextEquals\",             \"comparisonValue\": {               \"stringValue\": \"test@example.com\"             }           }         }       ],       \"percentageOptions\": [],       \"value\": {         \"boolValue\": false       }     }   ] } ```
         * @summary Update value
         * @param {string} environmentId The identifier of the Environment.
         * @param {number} settingId The id of the Setting.
         * @param {Array<JsonPatchOperation>} jsonPatchOperation 
         * @param {string} [reason] The reason note for the Audit Log if the Product\&#39;s \&quot;Config changes require a reason\&quot; preference is turned on.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSettingValueV2(environmentId: string, settingId: number, jsonPatchOperation: Array<JsonPatchOperation>, reason?: string, options?: any): AxiosPromise<SettingFormulaModel> {
            return localVarFp.updateSettingValueV2(environmentId, settingId, jsonPatchOperation, reason, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FeatureFlagSettingValuesV2Api - object-oriented interface
 * @export
 * @class FeatureFlagSettingValuesV2Api
 * @extends {BaseAPI}
 */
export class FeatureFlagSettingValuesV2Api extends BaseAPI {
    /**
     * This endpoint returns the value of a Feature Flag or Setting in a specified Environment identified by the `environmentId` parameter.  The most important fields in the response are the `defaultValue`, `targetingRules`, and `percentageEvaluationAttribute`. The `defaultValue` represents what the clients will get when the evaluation requests of our SDKs are not matching to any of the defined Targeting Rules, or when there are no additional rules to evaluate.  The `targetingRules` represents the current Targeting Rule configuration of the actual Feature Flag or Setting in an **ordered** collection, which means the order of the returned rules is matching to the evaluation order. You can read more about these rules [here](https://configcat.com/docs/targeting/targeting-overview/).  The `percentageEvaluationAttribute` represents the custom [User Object](https://configcat.com/docs/targeting/user-object/) attribute that must be used for [percentage evaluation](https://configcat.com/docs/targeting/percentage-options/) of the Feature Flag or Setting.
     * @summary Get value
     * @param {string} environmentId The identifier of the Environment.
     * @param {number} settingId The id of the Setting.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeatureFlagSettingValuesV2Api
     */
    public getSettingValueV2(environmentId: string, settingId: number, options?: RawAxiosRequestConfig) {
        return FeatureFlagSettingValuesV2ApiFp(this.configuration).getSettingValueV2(environmentId, settingId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint returns all Feature Flag and Setting values of a Config identified by the `configId` parameter in a specified Environment identified by the `environmentId` parameter.  The most important fields in the response are the `defaultValue`, `targetingRules`. The `defaultValue` represents what the clients will get when the evaluation requests of our SDKs are not matching to any of the defined Targeting Rules, or when there are no additional rules to evaluate.  The `targetingRules` represents the current Targeting Rule configuration of the actual Feature Flag or Setting in an **ordered** collection, which means the order of the returned rules is matching to the evaluation order. You can read more about these rules [here](https://configcat.com/docs/targeting/targeting-overview/).  The `percentageEvaluationAttribute` represents the custom [User Object](https://configcat.com/docs/targeting/user-object/) attribute that must be used for [percentage evaluation](https://configcat.com/docs/targeting/percentage-options/) of the Feature Flag or Setting.
     * @summary Get values
     * @param {string} configId The identifier of the Config.
     * @param {string} environmentId The identifier of the Environment.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeatureFlagSettingValuesV2Api
     */
    public getSettingValuesV2(configId: string, environmentId: string, options?: RawAxiosRequestConfig) {
        return FeatureFlagSettingValuesV2ApiFp(this.configuration).getSettingValuesV2(configId, environmentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint batch updates the Feature Flags and Settings of a Config identified by the `configId` parameter in a specified Environment identified by the `environmentId` parameter.  Only those Feature Flags and Settings are updated which are part of the request, all the others are left untouched.  **Important:** As this endpoint is doing a complete replace on those Feature Flags and Settings, which are set in the request.  It\'s important to set every other field that you don\'t want to change in its original state. Not listing a field means that it will reset.  For example: We have the following resource of a Feature Flag. ```json {   \"settingFormulas\": [     {       \"defaultValue\": {         \"boolValue\": false       },       \"targetingRules\": [         {           \"conditions\": [             {               \"userCondition\": {                 \"comparisonAttribute\": \"Email\",                 \"comparator\": \"sensitiveTextEquals\",                 \"comparisonValue\": {                   \"stringValue\": \"test@example.com\"                 }               }             }           ],           \"percentageOptions\": [],           \"value\": {             \"boolValue\": true           }         }       ],       \"settingId\": 1     }   ] } ``` If we send a batch replace request body as below: ```json {    \"updateFormulas\": [     {       \"defaultValue\": {         \"boolValue\": false       },       \"settingId\": 1     }   ] } ``` Then besides that the default value is set to `true`, all Targeting Rules of the related Feature Flag are deleted. So we get a response like this: ```json {   \"settingFormulas\": [     {       \"defaultValue\": {         \"boolValue\": false       },       \"targetingRules\": [],       \"setting\":        {         \"settingId\": 1       }     }   ] } ```
     * @summary Post values
     * @param {string} configId The identifier of the Config.
     * @param {string} environmentId The identifier of the Environment.
     * @param {UpdateEvaluationFormulasModel} updateEvaluationFormulasModel 
     * @param {string} [reason] The reason note for the Audit Log if the Product\&#39;s \&quot;Config changes require a reason\&quot; preference is turned on.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeatureFlagSettingValuesV2Api
     */
    public postSettingValuesV2(configId: string, environmentId: string, updateEvaluationFormulasModel: UpdateEvaluationFormulasModel, reason?: string, options?: RawAxiosRequestConfig) {
        return FeatureFlagSettingValuesV2ApiFp(this.configuration).postSettingValuesV2(configId, environmentId, updateEvaluationFormulasModel, reason, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint replaces the value and the Targeting Rules of a Feature Flag or Setting in a specified Environment identified by the <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://app.configcat.com/sdkkey\">SDK key</a> passed in the `X-CONFIGCAT-SDKKEY` header.  Only the `defaultValue`, `targetingRules`, and `percentageEvaluationAttribute` fields are modifiable by this endpoint.  **Important:** As this endpoint is doing a complete replace, it\'s important to set every other field that you don\'t want to change to its original state. Not listing one means it will reset.  For example: We have the following resource of a Feature Flag. ```json {   \"defaultValue\": {     \"boolValue\": false   },   \"targetingRules\": [     {       \"conditions\": [         {           \"userCondition\": {             \"comparisonAttribute\": \"Email\",             \"comparator\": \"sensitiveTextEquals\",             \"comparisonValue\": {               \"stringValue\": \"test@example.com\"             }           }         }       ],       \"percentageOptions\": [],       \"value\": {         \"boolValue\": true       }     }   ] } ``` If we send a replace request body as below: ```json {   \"defaultValue\": {     \"boolValue\": true   } } ``` Then besides that the default served value is set to `true`, all the Targeting Rules are deleted. So we get a response like this: ```json {   \"defaultValue\": {     \"boolValue\": true   },   \"targetingRules\": [] } ```
     * @summary Replace value
     * @param {string} environmentId The identifier of the Environment.
     * @param {number} settingId The id of the Setting.
     * @param {UpdateEvaluationFormulaModel} updateEvaluationFormulaModel 
     * @param {string} [reason] The reason note for the Audit Log if the Product\&#39;s \&quot;Config changes require a reason\&quot; preference is turned on.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeatureFlagSettingValuesV2Api
     */
    public replaceSettingValueV2(environmentId: string, settingId: number, updateEvaluationFormulaModel: UpdateEvaluationFormulaModel, reason?: string, options?: RawAxiosRequestConfig) {
        return FeatureFlagSettingValuesV2ApiFp(this.configuration).replaceSettingValueV2(environmentId, settingId, updateEvaluationFormulaModel, reason, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint updates the value of a Feature Flag or Setting with a collection of [JSON Patch](https://jsonpatch.com) operations in a specified Environment.  Only the `defaultValue`, `targetingRules`, and `percentageEvaluationAttribute` fields are modifiable by this endpoint.  The advantage of using JSON Patch is that you can describe individual update operations on a resource without touching attributes that you don\'t want to change. It supports collection reordering, so it also can be used for reordering the targeting rules of a Feature Flag or Setting.  For example: We have the following resource of a Feature Flag. ```json {   \"defaultValue\": {     \"boolValue\": false   },   \"targetingRules\": [     {       \"conditions\": [         {           \"userCondition\": {             \"comparisonAttribute\": \"Email\",             \"comparator\": \"sensitiveTextEquals\",             \"comparisonValue\": {               \"stringValue\": \"test@example.com\"             }           }         }       ],       \"percentageOptions\": [],       \"value\": {         \"boolValue\": true       }     }   ] } ``` If we send an update request body as below: ```json [   {     \"op\": \"replace\",     \"path\": \"/targetingRules/0/value/boolValue\",     \"value\": true   } ] ``` Only the first Targeting Rule\'s `value` is going to be set to `false` and all the other fields are remaining unchanged.  So we get a response like this: ```json {   \"defaultValue\": {     \"boolValue\": false   },   \"targetingRules\": [     {       \"conditions\": [         {           \"userCondition\": {             \"comparisonAttribute\": \"Email\",             \"comparator\": \"sensitiveTextEquals\",             \"comparisonValue\": {               \"stringValue\": \"test@example.com\"             }           }         }       ],       \"percentageOptions\": [],       \"value\": {         \"boolValue\": false       }     }   ] } ```
     * @summary Update value
     * @param {string} environmentId The identifier of the Environment.
     * @param {number} settingId The id of the Setting.
     * @param {Array<JsonPatchOperation>} jsonPatchOperation 
     * @param {string} [reason] The reason note for the Audit Log if the Product\&#39;s \&quot;Config changes require a reason\&quot; preference is turned on.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeatureFlagSettingValuesV2Api
     */
    public updateSettingValueV2(environmentId: string, settingId: number, jsonPatchOperation: Array<JsonPatchOperation>, reason?: string, options?: RawAxiosRequestConfig) {
        return FeatureFlagSettingValuesV2ApiFp(this.configuration).updateSettingValueV2(environmentId, settingId, jsonPatchOperation, reason, options).then((request) => request(this.axios, this.basePath));
    }
}

